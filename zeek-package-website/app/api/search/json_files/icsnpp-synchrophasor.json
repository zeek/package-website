{"description": "Synchrophasor (as defined in C37.118.2-2011 IEEE Standard for Synchrophasor", "tags": "synchrophasor, power, SCADA, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && PATH=$(zkg config plugin_dir)/packages/spicy-plugin/bin:$PATH btest -d -j $(nproc)", "build_cmd": "mkdir -p build && cd build && SPICYZ=$(command -v spicyz || echo %(package_base)s/spicy-plugin/build/bin/spicyz) cmake .. && cmake --build .", "url": "https://github.com/cisagov/icsnpp-synchrophasor", "summary": "Synchrophasor Data Transfer for Power Systems is a communication protocol for real-time communication between phasor measurement units (PMU), phasor data concentrators (PDC), and other applications", "script_dir": "analyzer", "plugin_dir": "build/spicy-modules", "readme": "# ICSNPP-Synchrophasor\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - Synchrophasor Data Transfer for Power Systems (C37.118) over TCP and UDP.\n\n## Overview\n\nICSNPP-Synchrophasor is a Zeek plugin (written in [Spicy](https://docs.zeek.org/projects/spicy/en/latest/)) for parsing and logging fields used by the Synchrophasor protocol as presented in the IEEE standard C37.118, defining a transmission format for reporting synchronized phasor measurements in power systems.\n\nThis parser produces the following log files, defined in [analyzer/main.zeek](analyzer/main.zeek):\n\n* `synchrophasor.log`\n* `synchrophasor_cmd.log`\n* `synchrophasor_hdr.log`\n* `synchrophasor_cfg.log`\n* `synchrophasor_cfg_detail.log`\n* `synchrophasor_data.log`\n* `synchrophasor_data_detail.log`\n\nFor additional information on this log file, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manager](https://docs.zeek.org/projects/package-manager/en/stable/index.html). It requires [Spicy](https://docs.zeek.org/projects/spicy/en/latest/) and the [Zeek Spicy plugin](https://docs.zeek.org/projects/spicy/en/latest/zeek.html).\n\n```bash\n$ zkg refresh\n$ zkg install icsnpp-synchrophasor\n```\n\nIf this package is installed from `zkg` it will be added to the available plugins. This can be tested by running `zeek -NN`. If installed correctly you will see `ANALYZER_SPICY_SYNCHROPHASOR_TCP` and `ANALYZER_SPICY_SYNCHROPHASOR_UDP` under the list of `Zeek::Spicy` analyzers.\n\nIf you have `zkg` configured to load packages (see `@load packages` in the [`zkg` Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)), this plugin and scripts will automatically be loaded and ready to go.\n\n## Logging Capabilities\n\n### Synchrophasor Log (synchrophasor.log)\n\n#### Overview\n\nThis log summarizes, by connection, Synchrophasor frames transmitted over 4712/tcp or 4713/udp to `synchrophasor.log`. The port can be overriden by redefining the `synchrophasor_ports_tcp` and `synchrophasor_ports_udp` variables, respectively, e.g.:\n\n```\n$ zeek -C -r synchrophasor_tcp.pcap local \"SYNCHROPHASOR::synchrophasor_ports_tcp={ 40712/tcp }\"\n```\n\n#### Fields Captured\n\n| Field             | Type           | Description                                               |\n| ----------------- |----------------|-----------------------------------------------------------| \n| ts                | time           | Timestamp (network time)                                  |\n| uid               | string         | Unique ID for this connection                             |\n| id                | conn_id        | Default Zeek connection info (IP addresses, ports)        |\n| proto             | string         | Transport protocol                                        |\n| version           | set<count>     | Protocol version number(s) observed                       |\n| data_stream_id    | set<count>     | Data stream ID(s) observed                                |\n| history           | string         | Command history (see below)                               |\n| frame_size_min    | count          | Smallest frame size observed, in bytes                    |\n| frame_size_max    | count          | Largest frame size observed, in bytes                     |\n| frame_size_tot    | count          | Sum of frame sizes observed, in bytes                     |\n| data_frame_count  | count          | Count of data frames observed                             |\n| data_rate         | set<count>     | Data rate values(s) observed                              |\n\n* The **`history`** field is comprised of letters representing commands specified in observed command frames in the order they were transmitted (e.g., `2Dd`, etc.):\n    - `d` - turn off transmission of data frames\n    - `D` - turn on transmission of data frames\n    - `h` - send HDR frame\n    - `1` - send CFG-1 frame\n    - `2` - send CFG-2 frame\n    - `3` - send CFG-3 frame\n    - `e` - extended frame\n\n### Synchrophasor Command Frame Log (synchrophasor_cmd.log)\n\n#### Overview\n\nThis log summarizes synchrophasor Command frames.\n\n#### Fields Captured\n\n| Field             | Type           | Description                                               |\n| ----------------- |----------------|-----------------------------------------------------------|\n| ts                | time           | Timestamp (network time)                                  |\n| uid               | string         | Unique ID for this connection                             |\n| id                | conn_id        | Default Zeek connection info (IP addresses, ports)        |\n| proto             | string         | Transport protocol                                        |\n| frame_type        | string         | Frame type from synchrophasor frame synchronization word  |\n| frame_size        | count          | Frame size (in bytes)                                     |\n| header_time_stamp | time           | Timestamp from frame header                               |\n| command           | string         | String represetnation of the command                      |\n| extframe          | vector<count>  | Extended frame data (user-defined)                        |\n\n### Synchrophasor Header Frame Log (synchrophasor_hdr.log)\n\n#### Overview\n\nThis log summarizes synchrophasor Header frames.\n\n#### Fields Captured\n\n| Field             | Type           | Description                                               |\n| ----------------- |----------------|-----------------------------------------------------------|\n| ts                | time           | Timestamp (network time)                                  |\n| uid               | string         | Unique ID for this connection                             |\n| id                | conn_id        | Default Zeek connection info (IP addresses, ports)        |\n| proto             | string         | Transport protocol                                        |\n| frame_type        | string         | Frame type from synchrophasor frame synchronization word  |\n| frame_size        | count          | Frame size (in bytes)                                     |\n| header_time_stamp | time           | Timestamp from frame header                               |\n| command           | string         | String represetnation of the command                      |\n| data              | string         | Human-readable header data (user-defined)                 |\n\n### Synchrophasor Configuration Frame Log (synchrophasor_cfg.log)\n\n#### Overview\n\nThis log summarizes synchrophasor Configuration (CFG-1, CFG-2, and CFG-3) frames.\n\n#### Fields Captured\n\n| Field              | Type           | Description                                               |\n| -------------------|----------------|-----------------------------------------------------------|\n| ts                 | time           | Timestamp (network time)                                  |\n| uid                | string         | Unique ID for this connection                             |\n| id                 | conn_id        | Default Zeek connection info (IP addresses, ports)        |\n| proto              | string         | Transport protocol                                        |\n| frame_type         | string         | Frame type from synchrophasor frame synchronization word  |\n| frame_size         | count          | Frame size (in bytes)                                     |\n| header_time_stamp  | time           | Timestamp from frame header                               |\n| cont_idx           | count          | Continuation index for fragmented frames                  |\n| pmu_count_expected | count          | The number of PMUs expected in the configuration frame    |\n| pmu_count_actual   | count          | The number of PMUs included in the configuration frame    |\n| cfg_frame_id       | string         | Unique string to correlate with synchrophasor_cfg_detail  |\n\n### Synchrophasor Configuration PMU Details (synchrophasor_cfg_detail.log)\n\n#### Overview\n\nThis log lists the per-PMU details from synchrophasor Configuration (CFG-1, CFG-2, and CFG-3) frames. As this can be very verbose, this log file is **disabled** by default. You can enable it by appending `SYNCHROPHASOR::log_cfg_detail=T` to your `zeek` command on the command line or by adding `redef SYNCHROPHASOR::log_cfg_detail = T;` to your `local.zeek` file.\n\n#### Fields Captured\n\nMost of the fields listed here are optional. Many may be unused during communication depending on device configuration. See IEEE Std C37.118.2-2011 for more details.\n\n\n| Field                                          | Type           | Description                                                                  |\n| -----------------------------------------------|----------------|------------------------------------------------------------------------------|\n| ts                                             | time           | Timestamp (network time)                                                     |\n| uid                                            | string         | Unique ID for this connection                                                |\n| id                                             | conn_id        | Default Zeek connection info (IP addresses, ports)                           |\n| proto                                          | string         | Transport protocol                                                           |\n| frame_type                                     | string         | Frame type from synchrophasor frame synchronization word                     |\n| header_time_stamp                              | time           | Timestamp from frame header                                                  |\n| cfg_frame_id                                   | string         | Unique string to correlate with synchrophasor_cfg                            |\n| pmu_idx                                        | count          | 0-based index of PMU configuration within the CFG frame                      |\n| svc_class                                      | string         | Service class as defined in IEEE Std C37.118.1                               |\n| station_name                                   | string         | Station name                                                                 |\n| data_source_id                                 | count          | Data source id                                                               |\n| global_pmuid                                   | string         | Global PMU ID                                                                |\n| phasor_shape                                   | bool           | F = phasor real and imaginary (rectangular), T = magnitude and angle (polar) |\n| phasor_format                                  | bool           | F = phasors 16-bit integer, T = floating point                               |\n| analog_format                                  | bool           | F = analogs 16-bit integer, T = floating point                               |\n| freq_format                                    | bool           | 0 = FREQ/DFREQ 16-bit integer, 1 = floating point                            |\n| phnmr                                          | count          | Number of phasors                                                            |\n| annmr                                          | count          | Number of analog values                                                      |\n| dgnmr                                          | count          | Number of digital status words                                               |\n| phnam                                          | vector<string> | Phasor channel names                                                         |\n| annam                                          | vector<string> | Analog channel names                                                         |\n| dgnam                                          | vector<string> | Digital channel names                                                        |\n| phasor_conv_phunit                             | vector<count>  | Phasor conversion factor format unit                                         |\n| phasor_conv_phvalue                            | vector<count>  | Phasor conversion factor format value                                        |\n| phasor_conv_upsampled_interpolation            | vector<bool>   | Up sampled with interpolation                                                |\n| phasor_conv_upsampled_extrapolation            | vector<bool>   | Upsampled with extrapolation                                                 |\n| phasor_conv_downsampled_reselection            | vector<bool>   | Down sampled by reselection (selecting every Nth sample)                     |\n| phasor_conv_downsampled_fir_filter             | vector<bool>   | Down sampled with FIR filter                                                 |\n| phasor_conv_downsampled_no_fir_filter          | vector<bool>   | Down sampled with non-FIR filter                                             |\n| phasor_conv_filtered_without_changing_sampling | vector<bool>   | Filtered without changing sampling                                           |\n| phasor_conv_calibration_mag_adj                | vector<bool>   | Phasor magnitude adjusted for calibration                                    |\n| phasor_conv_calibration_phas_adj               | vector<bool>   | Phasor phase adjusted for calibration                                        |\n| phasor_conv_rotation_phase_adj                 | vector<bool>   | Phasor phase adjusted for rotation ( \u00b130o, \u00b1120o, etc.)                      |\n| phasor_conv_pseudo_phasor_val                  | vector<bool>   | Pseudo-phasor value (combined from other phasors)                            |\n| phasor_conv_mod_appl                           | vector<bool>   | Modification applied, type not here defined                                  |\n| phasor_conv_phasor_component                   | vector<count>  | Phasor component (see std. spec)                                             |\n| phasor_conv_phasor_type                        | vector<bool>   | F = voltage, T = current                                                     |\n| phasor_conv_user_def                           | vector<count>  | User-defined                                                                 |\n| phasor_conv_scale_factor                       | vector<double> | Scale factor Y                                                               |\n| phasor_conv_angle_adj                          | vector<double> | Phasor angle adjustment \u03b8                                                    |\n| analog_conv_analog_flags                       | vector<count>  | Analog flags                                                                 |\n| analog_conv_user_defined_scaling               | vector<int>    | User-defined scaling                                                         |\n| analog_conv_mag_scale                          | vector<double> | Magnitude scale factor                                                       |\n| analog_conv_offset                             | vector<double> | Angle offset                                                                 |\n| digital_conv_normal_status_mask                | vector<count>  | Digital input normal status mask                                             |\n| digital_conv_valid_inputs_mask                 | vector<count>  | Digital input valid inputs status mask                                       |\n| pmu_lat                                        | double         | PMU latitude in degrees                                                      |\n| pmu_lon                                        | double         | PMU longitude in degrees                                                     |\n| pmu_elev                                       | double         | PMU elevation in meters                                                      |\n| window                                         | int            | Phasor measurement window length                                             |\n| group_delay                                    | int            | Phasor measurement group delay                                               |\n| fnom                                           | count          | Nominal line frequency code                                                  |\n| cfgcnt                                         | count          | Configuration change count                                                   |\n\n### Synchrophasor Data Frame Log (synchrophasor_data.log)\n\n#### Overview\n\nThis log summarizes synchrophasor Data frames. As this can be very verbose, this log file is **disabled** by default. You can enable it by appending `SYNCHROPHASOR::log_data_frame=T` to your `zeek` command on the command line or by adding `redef SYNCHROPHASOR::log_data_frame = T;` to your `local.zeek` file.\n\n#### Fields Captured\n\n| Field              | Type           | Description                                               |\n| -------------------|----------------|-----------------------------------------------------------|\n| ts                 | time           | Timestamp (network time)                                  |\n| uid                | string         | Unique ID for this connection                             |\n| id                 | conn_id        | Default Zeek connection info (IP addresses, ports)        |\n| proto              | string         | Transport protocol                                        |\n| frame_type         | string         | Frame type from synchrophasor frame synchronization word  |\n| frame_size         | count          | Frame size (in bytes)                                     |\n| header_time_stamp  | time           | Timestamp from frame header                               |\n| pmu_count_expected | count          | The number of PMUs expected in the data frame             |\n| pmu_count_actual   | count          | The number of PMUs included in the data frame             |\n| data_frame_id      | string         | Unique string to correlate with synchrophasor_data_detail |\n\n### Synchrophasor Data PMU Details Log (synchrophasor_data_detail.log)\n\n#### Overview\n\nThis log lists the per-PMU details from synchrophasor Data frames. As this can be very verbose, this log file is **disabled** by default. You can enable it by appending `SYNCHROPHASOR::log_data_detail=T` to your `zeek` command on the command line or by adding `redef SYNCHROPHASOR::log_data_detail = T;` to your `local.zeek` file. Note that `log_data_frame` described above must also be set to `T` for `log_data_detail` to take effect.\n\nMost of the fields listed here are optional. Many may be unused during communication depending on device configuration. See IEEE Std C37.118.2-2011 for more details.\n\n#### Fields Captured\n\n| Field                           | Type           | Description                                                  |\n| --------------------------------|----------------|--------------------------------------------------------------|\n| ts                              | time           | Timestamp (network time)                                     |\n| uid                             | string         | Unique ID for this connection                                |\n| id                              | conn_id        | Default Zeek connection info (IP addresses, ports)           |\n| proto                           | string         | Transport protocol                                           |\n| frame_type                      | string         | Frame type from synchrophasor frame synchronization word     |\n| header_time_stamp               | time           | Timestamp from frame header                                  |\n| data_frame_id                   | string         | Unique string to correlate with synchrophasor_data_detail    |\n| pmu_idx                         | count          | 0-based index of PMU data within the data frame              |\n| trigger_reason                  | count          | Trigger reason                                               |\n| unlocked_time                   | count          | Unlocked time                                                |\n| pmu_time_quality                | count          | PMU time quality                                             |\n| data_modified                   | bool           | T = data made by post-processing, F = otherwise              |\n| config_change                   | bool           | T = confiuration change advised, F = change effected         |\n| pmu_trigger_pickup              | bool           | T = PMU trigger detected, F = no trigger                     |\n| data_sorting_type               | bool           | F = sort by time stamp, T = sort by arrival                  |\n| pmu_sync_error                  | bool           | T = time sync error, F = PMU in sync with time source        |\n| data_error_indicator            | count          | Data error indicator                                         |\n| est_rectangular_real            | vector<double> | Phasor estimate: rectangular real value                      |\n| est_rectangular_imaginary       | vector<double> | Phasor estimate: rectangular imaginary value                 |\n| est_polar_magnitude             | vector<double> | Phasor estimate: polar magnitude value                       |\n| est_polar_angle                 | vector<double> | Phasor estimate: polar angle radians                         |\n| freq_dev_mhz                    | double         | Frequency deviation from nominal, in mHz                     |\n| rocof                           | double         | ROCOF, in hertz per second times 100                         |\n| analog_data                     | vector<double> | User-defined analog data value                               |\n| digital                         | vector<count>  | User-defined digital status word                             |\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/ICSNPP-BSAP)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC. Released under the terms of the 3-Clause BSD License (see [`LICENSE.txt`](./LICENSE.txt)).\n"}