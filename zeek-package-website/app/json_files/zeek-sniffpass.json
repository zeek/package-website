{"description": "Sniffpass will alert on cleartext passwords discovered in HTTP POST requests", "tags": "password, logging", "version": "master", "depends": null, "test_cmd": null, "build_cmd": null, "url": "https://github.com/cybera/zeek-sniffpass", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "# Sniffpass\n\n[![Build Status](https://travis-ci.org/cybera/zeek-sniffpass.svg?branch=master)](https://travis-ci.org/cybera/zeek-sniffpass)\n\n# Description\nSniffpass will alert on cleartext passwords discovered in HTTP POST requests.\n\nBy default it will not log passwords, but only log the username in a `post_username` field in `http.log`\n and create an entry in `notice.log` that a password was observed.\n\n# Installation\n- Install via Zeek package manager:\n   ```bash\n   $ zkg install zeek-sniffpass\n\n   # or for legacy installs\n\n   $ zkg install zeek-sniffpass\n   ```\n- Download the files to `$PREFIX/zeek/share/zeek/site/sniffpass` and add the following to your `local.zeek`:\n    ```bash\n    @load ./sniffpass\n    ```\n\n# Configuring\n- You can enable different types of password logging. Add one (or more) of the following options to your `local.zeek` file:\n    ```\n    redef SNIFFPASS::log_password_plaintext = T;\n    redef SNIFFPASS::log_password_md5 = T;\n    redef SNIFFPASS::log_password_sha1 = T;\n    redef SNIFFPASS::log_password_sha256 = T;\n    ```\n- You can disable logging to notice.log using this flag:\n    ```\n    redef SNIFFPASS::notice_log_enable = F;\n    ```\n\n- By default, only the first 300 bytes of an HTTP POST request are parsed. This can be changed by adding the following to your `local.zeek` file and setting your own value:\n    ```\n    redef SNIFFPASS::post_body_limit = 300\n    ```\n\n# Broker Support\nZeek can use Broker to publish discovered username and passwords. Each Zeek worker will connect to the `broker_host`. This can be useful in cases where credentials shouldn't be\nsaved to disk in a Zeek log file, but instead have them handled by a script. One use case of this is sending them to an API to retire valid credentials seen.\n\n- Broker publishing is disabled by default, but can be enabled using these options:\n    ```\n    redef SNIFFPASS::broker_enable = T;\n    redef SNIFFPASS::broker_host = \"127.0.0.1\";\n    redef SNIFFPASS::broker_port = 9999/tcp;\n    ```\n- You can change the topic to something other than the default:\n    ```\n    redef SNIFFPASS::broker_topic = \"/sniffpass/credentials_seen\";\n    ```\n## Example Broker Python Script\nThis example was borrowed from the [Broker documentation](https://docs.zeek.org/projects/broker/en/lts/python.html)\n```python\n    import broker\n    import sys\n\n    # Setup endpoint and connect to Zeek.\n    ep = broker.Endpoint()\n    sub = ep.make_subscriber(\"/sniffpass/credentials_seen\")\n    ss = ep.make_status_subscriber(True);\n\n    # Listen for connections from workers\n    ep.listen(\"127.0.0.1\", 9999)\n\n    # Wait until connection is established.\n    st = ss.get()\n\n    if not (type(st) == broker.Status and st.code() == broker.SC.PeerAdded):\n        print(\"could not connect\")\n        sys.exit(0)\n\n    while True:\n        (t, d) = sub.get()\n        event = broker.zeek.Event(d)\n        print(\"received {}{}\".format(event.name(), event.args()))\n```\n\nWill give output like this when plaintext credentials are seen:\n```\n    $ python test_broker.py\n    received SNIFFPASS::credentials_seen[u'my_username', u'Thi1sI$myP@ssw0rd']\n```\n\n## Detailed Broker Output\nThere is an option to also include Destination IP, Destination Port, and full URL in the Broker output.\n\nYou can enable a more detailed output in Broker:\n\n    redef SNIFFPASS::broker_detailed = T;\n\nThe output from the Example Python Script:\n\n    $ python test_broker.py\n    received SNIFFPASS::credentials_seen_detailed[(u'my_username', u'Thi1sI$myP@ssw)rd'), IPv4Address(u'127.0.0.1'), 80/tcp, u'localhost/']\n\n# Automated Testing\nAutomated tests are done against the `http_post.trace` file with Travis CI.\n\n# Troubleshooting\n- If you are having any issues, ensure that you have TCP Checksumming disabled in your `local.zeek` file, as per [Zeek Documentation](https://www.zeek.org/documentation/faq.html#why-isn-t-zeek-producing-the-logs-i-expect-a-note-about-checksums)\n\n    ```\n    redef ignore_checksums = T;\n    ```\n\n# Created By\nAndrew Klaus (Cybera)\n\n_This module was inspired by the University of Alberta's 2019 CUCCIO Innovation Award Plaintext Password Sniffing Project._\n"}