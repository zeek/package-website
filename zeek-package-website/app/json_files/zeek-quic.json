{"description": "Detects the Google QUIC (GQUIC) protocol and adds \"gquic\"", "tags": "plugin, analyzer, gquic, quic", "version": "v0.7.0", "depends": null, "test_cmd": null, "build_cmd": "./configure && make", "url": "https://github.com/corelight/zeek-quic", "summary": null, "script_dir": "build/scripts/Corelight/GQUIC", "plugin_dir": "build/Corelight_GQUIC.tgz", "readme": "\nGoogle QUIC analyzer/detector for Zeek\n======================================\n\nThis analyzer can parse and detect the Google implementation of QUIC\n(called GQUIC here for simplicity), using the wire format described at:\n\nhttps://www.chromium.org/quic.\n\nThe version of GQUIC used by Chrome at the time of writing this analyzer\nwas Q039 with some Google servers (and possibly Chrome canary builds)\nalso being able to use Q043.  This analyzer was able to detect both\nthose versions during testing.\n\nThe wire format described in GQUIC documents at that time (May 4-5 2018)\nalso appeared out of sync with the actual implementations used in the\nwild.\n\nAdditionally, there seems to be regular effort to migrate GQUIC to track\nthe IETF draft standard for QUIC described at:\n\nhttps://github.com/quicwg/base-drafts\nhttps://datatracker.ietf.org/wg/quic/documents/\n\nWith that draft differing in significant ways from the GQUIC\nimplementations this analyzer was tested against and also having changed\nits wire format recently.\n\nTo summarize, this GQUIC analyzer, if not updated in the future, isn't\nexpected to continue working with later evolutions of the QUIC protocol.\n\nInstallation\n------------\n\nVia `zkg <https://docs.zeek.org/projects/package-manager/en/stable>`_::\n\n    zkg install corelight/zeek-quic\n\nElse you will have to build and install it yourself (assuming `zeek-config`\nin in your `PATH`)::\n\n    ./configure\n    make\n    make install\n\nUsage\n-----\n\nBy default this simply detects whether a UDP connection looks like the\nQUIC protocol, adds the \"guic\" string to conn.log's \"service\" field and\nthen stops parsing.\n\nIf you want to write a custom script that handles other events provided\nby the analyzer, you might want to have the analyzer continue to parse\nthe connection even after the protocol has been confirmed::\n\n    redef GQUIC::skip_after_confirm = F;\n\nThe events provided can give coarse information regarding packet type\n(Regular Packet vs. Version Negotiation vs Public Reset) as well as the\ncontent of the Public Header (like Packet Number, QUIC Version,\nConnection ID, or Diversification Nonce).\n\nReferences / Tools\n------------------\n\nTools: https://github.com/quicwg/base-drafts/wiki/Tools\n\nImplementations: https://github.com/quicwg/base-drafts/wiki/Implementations\n\nChromium: https://www.chromium.org/quic/playing-with-quic\n\nAcknowledgements\n----------------\n\nPrior QUIC analyzer work by Mike Dopheide: https://github.com/dopheide-esnet/bro-quic\n"}