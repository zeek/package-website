{"description": "BSAP over IP plugin for parsing and logging of the BSAP protocol - CISA ICSNPP", "tags": "bsap, BSAP, ics, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && btest -c btest.cfg", "build_cmd": "./configure && make", "url": "https://github.com/cisagov/icsnpp-bsap", "summary": null, "script_dir": "build/scripts/icsnpp/bsap", "plugin_dir": null, "readme": "# ICSNPP-BSAP\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - BSAP over IP.\n\n## Overview\n\nICSNPP-BSAP is a Zeek plugin for parsing and logging fields within the BSAP (Bristol Standard Asynchronous Protocol).\n\nThis plugin was developed to be fully customizable. To drill down into specific BSAP packets and log certain variables, users can add the logging functionality to [scripts/icsnpp/bsap/main.zeek](https://raw.githubusercontent.com/cisagov/icsnpp-bsap/master/scripts/icsnpp/bsap/main.zeek). The functions within [scripts/icsnpp/bsap/main.zeek](https://raw.githubusercontent.com/cisagov/icsnpp-bsap/master/scripts/icsnpp/bsap/main.zeek) and [src/events.bif](https://raw.githubusercontent.com/cisagov/icsnpp-bsap/master/src/events.bif) are good guides for adding new logging functionality.\n\nThis parser produces seven log files. These log files are defined in [scripts/icsnpp/bsap/main.zeek](https://raw.githubusercontent.com/cisagov/icsnpp-bsap/master/scripts/icsnpp/bsap/main.zeek).\n* bsap_ip_header.log\n* bsap_ip_rdb.log\n* bsap_ip_unknown.log \n* bsap_serial_header.log \n* bsap_serial_rdb.log \n* bsap_serial_rdb_ext.log\n* bsap_serial_unknown.log\n\nFor additional information on these log files, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manger](https://docs.zeek.org/projects/package-manager/en/stable/index.html)\n\n```bash\nzkg refresh\nzkg install icsnpp-bsap\n```\n\nIf this package is installed from ZKG, it will be added to the available plugins. This can be tested by running `zeek -N`. If installed correctly, users will see `ICSNPP::BSAP`.\n\nIf ZKG is configured to load packages (see @load packages in quickstart guide), this plugin and these scripts will automatically be loaded and ready to go.\n[ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\n\nIf users are not using site/local.zeek or another site installation of Zeek and want to run this package on a packet capture, they can add `icsnpp/bsap` to the command to run this plugin's scripts on the packet capture:\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-bsap.git\nzeek -Cr icsnpp-bsap/tests/traces/bsap-ip_example.pcap icsnpp/bsap\nzeek -Cr icsnpp-bsap/tests/traces/bsap-serial_example.pcapng icsnpp/bsap\n```\n\n### Manual Install\n\nTo install this package manually, clone this repository and run the configure and make commands as shown below.\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-bsap.git\ncd icsnpp-bsap/\n./configure\nmake\n```\n\nIf these commands succeed, users will end up with a newly created build directory that contains all the files needed to run/test this plugin. The easiest way to test the parser is to point the ZEEK_PLUGIN_PATH environment variable to this build directory.\n\n```bash\nexport ZEEK_PLUGIN_PATH=$PWD/build/\nzeek -N # Ensure everything compiled correctly and you are able to see ICSNPP::BSAP_IP\n```\n\nOnce users have tested the functionality locally and it appears to have compiled correctly, they can install it system-wide:\n```bash\nsudo make install\nunset ZEEK_PLUGIN_PATH\nzeek -N # Ensure everything installed correctly and you are able to see ICSNPP::BSAP_IP\n```\n\nTo run this plugin in a site deployment users will need to add the line `@load icsnpp/bsap` to the `site/local.zeek` file to load this plugin's scripts.\n\nIf users are not using site/local.zeek or another site installation of Zeek and want to run this package on a packet capture, they can add `icsnpp/bsap` to the command to run this plugin's scripts on the packet capture:\n\n```bash\nzeek -Cr icsnpp-bsap/tests/traces/bsap-ip_example.pcap icsnpp/bsap\nzeek -Cr icsnpp-bsap/tests/traces/bsap-serial_example.pcapng icsnpp/bsap\n```\n\nIf users want to deploy this plugin on an already existing Zeek implementation and don't want to build the plugin on the machine, they can extract the ICSNPP_Bsap.tgz file to the directory of the established ZEEK_PLUGIN_PATH (default is `${ZEEK_INSTALLATION_DIR}/lib/zeek/plugins/`).\n\n```bash\ntar xvzf build/ICSNPP_Bsap.tgz -C $ZEEK_PLUGIN_PATH \n```\n\n## Logging Capabilities\n\n### Header Log (bsap_ip_header.log)\n\n#### Overview\n\nThis log captures BSAP header information for every BSAP packet converted to ethernet and logs it to **bsap_ip_header.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                                   |\n| ----------------- |-----------|---------------------------------------------------------------|\n| ts                | time      | Timestamp                                                     |\n| uid               | string    | Unique ID for this connection                                 |\n| id                | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig           | bool      | True if the packet is sent from the originator                |\n| source_h          | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p          | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h     | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p     | port      | Destination port (see *Source and Destination Fields*)        |\n| num_msg           | string    | Number of functions per message                               |\n| type_name         | count     | Message type                                                  |\n\n\n### RDB (Remote Database Access) Log (bsap_ip_rdb.log)\n\n#### Overview\n\nThis log captures BSAP RDB function information and logs it to **bsap_ip_rdb.log**.\n\nThe vast majority of BSAP traffic is RDB function traffic. The RDB access is used to read and write variables between master and slave RTUs.\n\n#### Fields Captured\n\n| Field                 | Type           | Description                                                 |\n| --------------------- |----------------|-------------------------------------------------------------|\n| ts                    | time           | Timestamp                                                   |\n| uid                   | string         | Unique ID for this connection                               |\n| id                    | conn_id        | Default Zeek connection info (IP addresses, ports)          |\n| is_orig               | bool           | True if the packet is sent from the originator              |\n| source_h              | address        | Source IP address (see *Source and Destination Fields*)     |\n| source_p              | port           | Source port (see *Source and Destination Fields*)           |\n| destination_h         | address        | Destination IP address (see *Source and Destination Fields*)|\n| destination_p         | port           | Destination port (see *Source and Destination Fields*)      |\n| header_size           | count          | Header length                                               |\n| mes_seq               | count          | Message sequence                                            |\n| res_seq               | count          | Response sequence                                           |\n| data_len              | count          | Length of data                                              |\n| sequence              | count          | Function sequence (same as response)                        |\n| app_func_code         | string         | Application function                                        |\n| node_status           | count          | Node status byte                                            |\n| func_code             | string         | Application sub function                                    |\n| variable_count        | count          | Variable count in message                                   |\n| variables             | vector<string> | Vector of variables in message                              |\n| variable_value        | vector<string> | Vector of variable value in message                         |\n\n\n### Unknown Log (bsap_ip_unknown.log)\n\n#### Overview\n\nThis log captures all other zeek_bsap_ip traffic that hasn't been defined and logs it to **bsap_ip_unknown.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                                   |\n| --------------------- |-----------|---------------------------------------------------------------|\n| ts                    | time      | Timestamp                                                     |\n| uid                   | string    | Unique ID for this connection                                 |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig               | bool      | True if the packet is sent from the originator                |\n| source_h              | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p              | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h         | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p         | port      | Destination port (see *Source and Destination Fields*)        |\n| data                  | string    | BSAP_IP unknown data                                          |\n\n\n### BSAP Header Log (bsap_serial_header.log)\n\n#### Overview\n\nThis log captures BSAP header information for every BSAP packet converted to Ethernet and logs it to **bsap_serial_header.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                                   |\n| ----------------- |-----------|---------------------------------------------------------------|\n| ts                | time      | Timestamp                                                     |\n| uid               | string    | Unique ID for this connection                                 |\n| id                | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig           | bool      | True if the packet is sent from the originator                |\n| source_h          | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p          | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h     | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p     | port      | Destination port (see *Source and Destination Fields*)        |\n| ser               | string    | Message serial number                                         |\n| dadd              | count     | Destination address                                           |\n| sadd              | count     | Source address                                                |\n| ctl               | count     | Control byte                                                  |\n| dfun              | string    | Destination function                                          |\n| seq               | count     | Message sequence                                              |\n| sfun              | string    | Source function                                               |\n| nsb               | count     | Node status byte                                              |\n| type_name         | string    | Local or global header                                        |\n\n### BSAP RDB (Remote Database Access) Log (bsap_serial_rdb.log)\n\n#### Overview\n\nThis log captures BSAP RDB function information and logs it to **bsap_serial_rdb.log**.\n\nThe vast majority of BSAP traffic is RDB function traffic. The RDB access is used to read and write variables between master and slave RTU's.\n\n#### Fields Captured\n\n| Field                 | Type           | Description                                                 |\n| --------------------- |----------------|-------------------------------------------------------------|\n| ts                    | time           | Timestamp                                                   |\n| uid                   | string         | Unique ID for this connection                               |\n| id                    | conn_id        | Default Zeek connection info (IP addresses, ports)          |\n| is_orig               | bool           | True if the packet is sent from the originator              |\n| source_h              | address        | Source IP address (see *Source and Destination Fields*)     |\n| source_p              | port           | Source port (see *Source and Destination Fields*)           |\n| destination_h         | address        | Destination IP address (see *Source and Destination Fields*)|\n| destination_p         | port           | Destination port (see *Source and Destination Fields*)      |\n| func_code             | string         | RDB function being initiated                                |\n| variables             | vector<string> | Vector of variables in message                              |\n| variable_value        | vector<string> | Vector of variable value in message                         |\n\n\n### BSAP BSAP_RDB_EXT (Remote Database Access Extended) Log (bsap_serial_rdb_ext.log)\n\n#### Overview\n\nThis log captures BSAP RDB Extension function information and logs it to **bsap_serial_rdb_ext.log**.\n\nThese Extension functions of RDB contain information from controllers loading date and time, setting clearing diagnostics, and calling system resets. These only pertain to the GFC 3308 controllers.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                                   |\n| --------------------- |-----------|---------------------------------------------------------------|\n| ts                    | time      | Timestamp                                                     |\n| uid                   | string    | Unique ID for this connection                                 |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig               | bool      | True if the packet is sent from the originator                |\n| source_h              | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p              | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h         | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p         | port      | Destination port (see *Source and Destination Fields*)        |\n| dfun                  | string    | Destination function                                          |\n| seq                   | count     | Message sequence                                              |\n| sfun                  | string    | Source function                                               |\n| nsb                   | count     | Node status byte                                              |\n| extfun                | string    | RDB extension function                                        |\n| data                  | string    | RDB extension function specific data                          |\n\n\n### BSAP Unknown (bsap_serial_unknown.log)\n\n#### Overview\n\nThis log captures all other BSAP traffic that hasn't been defined and logs it to **bsap_serial_unknown.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                                   |\n| --------------------- |-----------|---------------------------------------------------------------|\n| ts                    | time      | Timestamp                                                     |\n| uid                   | string    | Unique ID for this connection                                 |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig               | bool      | True if the packet is sent from the originator                |\n| source_h              | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p              | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h         | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p         | port      | Destination port (see *Source and Destination Fields*)        |\n| data                  | string    | BSAP unknown data                                             |\n\n### Source and Destination Fields\n\n#### Overview\n\nZeek's typical behavior is to focus on and log packets from the originator and not log packets from the responder. However, most ICS protocols contain useful information in the responses, so the ICSNPP parsers log both originator and responses packets. Zeek's default behavior, defined in its `id` struct, is to never switch these originator/responder roles which leads to inconsistencies and inaccuracies when looking at ICS traffic that logs responses.\n\nThe default Zeek `id` struct contains the following logged fields:\n* id.orig_h (Original Originator/Source Host)\n* id.orig_p (Original Originator/Source Port)\n* id.resp_h (Original Responder/Destination Host)\n* id.resp_p (Original Responder/Destination Port)\n\nAdditionally, the `is_orig` field is a boolean field that is set to T (True) when the id_orig fields are the true originators/source and F (False) when the id_resp fields are the true originators/source.\n\nTo not break existing platforms that utilize the default `id` struct and `is_orig` field functionality, the ICSNPP team has added four new fields to each log file instead of changing Zeek's default behavior. These four new fields provide the accurate information regarding source and destination IP addresses and ports:\n* source_h (True Originator/Source Host)\n* source_p (True Originator/Source Port)\n* destination_h (True Responder/Destination Host)\n* destination_p (True Responder/Destination Port)\n\nThe pseudocode below shows the relationship between the `id` struct, `is_orig` field, and the new `source` and `destination` fields.\n\n```\nif is_orig == True\n    source_h == id.orig_h\n    source_p == id.orig_p\n    destination_h == id.resp_h\n    destination_p == id.resp_p\nif is_orig == False\n    source_h == id.resp_h\n    source_p == id.resp_p\n    destination_h == id.orig_h\n    destination_p == id.orig_p\n```\n\n#### Example\n\nThe table below shows an example of these fields in the log files. The first log in the table represents a Modbus request from 192.168.1.10 -> 192.168.1.200 and the second log represents a Modbus reply from 192.168.1.200 -> 192.168.1.10. As shown in the table below, the `id` structure lists both packets as having the same originator and responder, but the `source` and `destination` fields reflect the true source and destination of these packets.\n\n| id.orig_h    | id.orig_p | id.resp_h     | id.resp_p | is_orig | source_h      | source_p | destination_h | destination_p |\n| ------------ | --------- |---------------|-----------|---------|---------------|----------|---------------|-------------- |\n| 192.168.1.10 | 47785     | 192.168.1.200 | 502       | T       | 192.168.1.10  | 47785    | 192.168.1.200 | 502           |\n| 192.168.1.10 | 47785     | 192.168.1.200 | 502       | F       | 192.168.1.200 | 502      | 192.168.1.10  | 47785         |\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/icsnpp-bsap)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC. Released under the terms of the 3-Clause BSD License (see [`LICENSE.txt`](https://raw.githubusercontent.com/cisagov/icsnpp-bsap/master/./LICENSE.txt)).\n"}