{"description": "Bro IDS/ MongoDB connector.", "tags": "bro plugin, MongoDB, writer, security, conn, logging, rita", "version": "master", "depends": null, "test_cmd": null, "build_cmd": "(./configure --bro-dist=%(bro_dist)s && make)", "url": "https://github.com/activecm/bro-mongodb.git", "summary": null, "script_dir": null, "plugin_dir": null, "readme": "# ActiveCM::MongodbWriter\n\n## Introduction and Warning\n\nThis plugin allows logging to MongoDB.\nWhile the basic functionality has been tested and shown to work, it has not\nseen much real-life testing and no functionality guarantees are made.\n\n## Installation\n\n**IMPORTANT: BRO IDS MUST BE [INSTALLED FROM SOURCE](https://www.bro.org/sphinx/install/install.html), AND THE SOURCE MUST BE AVAILABLE ON THE SYSTEM**\n\nFirst, install Bro IDS, and MongoDB.\n\nNext, install the following dependencies:\n\nDebian packages: `pkg-config libssl-dev libsasl2-dev libsnappy-dev perl make cmake clang gcc g++ git`\n\nAlpine linux packages: `pkgconf openssl-dev cyrus-sasl-dev snappy-dev perl make cmake clang gcc g++ git`\n\n\nThen, install the MongoDB C++ driver, mongocxx. Official instructions are\nprovided [here](http://mongodb.github.io/mongo-cxx-driver/mongocxx-v3/installation/).\nHowever, the following script should work on most systems.\n```\ncd /tmp\nwget -q https://github.com/mongodb/mongo-c-driver/releases/download/1.9.2/mongo-c-driver-1.9.2.tar.gz\ntar xzf mongo-c-driver-1.9.2.tar.gz\ncd mongo-c-driver-1.9.2\n./configure --disable-automatic-init-and-cleanup --enable-static\nmake\nsudo make install\ncd /tmp\nwget -q https://github.com/mongodb/mongo-cxx-driver/archive/r3.1.3.tar.gz\ntar xzf r3.1.3.tar.gz\ncd mongo-cxx-driver-r3.1.3/build\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..\nsudo make EP_mnmlstc_core\nmake\nsudo make install\n```\n\nAfter installing mongocxx, install the Bro-MongoDB plugin\neither using bro-pkg, or manually via the command-line.\n\nTo install the plugin using [bro-pkg](http://bro-package-manager.readthedocs.io/en/stable/), use:\n\n```\nbro-pkg autoconfig\nsudo bro-pkg refresh --aggregate\nsudo bro-pkg install bro/activecm/bro-mongodb.git\n```\n\nTo install manually from the cloned repository, use:\n\n```\nsudo ./configure && make && make install\n```\n\n\n## Logging Data into MongoDB Databases\n\nThe easiest way to enable MongoDB logging is to load the `mongodb.bro` script\nincluded with the plugin. This script may be loaded via `broctl` by adding\n`@load mongodb.bro` to the `local.bro` policy script. Alternatively,\n`mongodb.bro` may be specified on the command line when running `bro`.\n\nExamples:\n\n```\n# Run Bro-MongoDB such that data is sent to MyDB\nbro -r test.pcap mongodb.bro 'MongodbWriter::DB = \"MyDB\"'\n\n# Run Bro-MongoDB such that data is sent to MyDB-YYYY-mm-dd-HH-MM on localhost\nbro -r test.pcap mongodb.bro 'MongodbWriter::DB = \"MyDB\"' 'MongodbWriter::ROTATE = \"true\"'\n\n# Run Bro-MongoDB with a TLS enabled MongoDB server. Assumes a CA signed server certificate\nbro -r test.pcap mongodb.bro 'MongodbWriter::URI = \"mongodb://other-host:27017?ssl=true\"'\n\n# Run Bro-MongoDB with a TLS enabled MongoDB server and disable server authentication.\nbro -r test.pcap mongodb.bro 'MongodbWriter::URI = \"mongodb://other-host:27017?ssl=true\"' 'MongodbWriter::VERIFY_CERT = \"false\"'\n\n# Run Bro-MongoDB with a TLS enabled MongoDB server and a custom certificate authority\nbro -r test.pcap mongodb.bro 'MongodbWriter::URI = \"mongodb://other-host:27017?ssl=true\"' 'MongodbWriter::CA_FILE = \"/path/to/ca/file\"'\n\n# Run Bro-MongoDB with SCRAM-SHA-1 authentication\nbro -r test.pcap mongodb.bro 'MongodbWriter::URI = \"mongodb://username:password@other-host:27017/auth-db\"'\n\n# Run Bro-MongoDB with X.509 authentication\nbro -r test.pcap mongodb.bro 'MongodbWriter::URI = \"mongodb://other-host:27017/admin?ssl=true&authMechanism=MONGODB-X509\"' 'MongodbWriter::CLIENT_CERT = \"/path/to/client/cert\"'\n```\n\nAlternatively, the plugin may be attached to individual logs as so:\n```\nevent bro_init()\n{\n    local mongoFilter: Log::Filter =\n    [\n        $name=\"MongoDB\",\n        $config = table(\n                       [\"uri\"] = URI,\n                       [\"selectedDB\"] = DB,\n                       [\"rotate\"] = ROTATE,\n                       [\"CAFile\"] = CA_FILE,\n                       [\"verifyCert\"] = VERIFY_CERT,\n                       [\"clientCert\"] = CLIENT_CERT\n                   ),\n        $writer=Log::WRITER_MONGODB\n    ];\n\n    Log::add_filter(HTTP::LOG, copy(mongoFilter));\n    Log::add_filter(Conn::LOG, copy(mongoFilter));\n    Log::add_filter(DNS::LOG, copy(mongoFilter));\n    ....\n}\n```\n\n\n## Configuration options: MongodbWriter\n\nThe `mongodb.bro` script supports the following configuration options via Bro redefines.\n\n- **MongodbWriter::URI**: The [MongoDB URI](https://docs.mongodb.com/manual/reference/connection-string/) contains information on how to contact a MongoDB Server.\n  - Default value: **mongodb://localhost:27017**\n\n- **MongodbWriter::DB**: The name of the database logs will be imported into. If\nROTATE is specified, DB will be used as the base for the names of the databases.\n  - Default value: **BRO-IMPORT**\n\n- **MongodbWriter::ROTATE**:  ROTATE turns on database rotation similar to that of Bro's ASCII\nlog writer.\n  - Default value: **false**\n\n- **MongodbWriter::VERIFY_CERT**: If TLS is enabled (via the URI) server\nauthentication may be turned off. WARNING: this may lead to MITM attacks.\n  - Default value: **true**\n\n- **MongodbWriter::CA_FILE**: If TLS is enabled (via the URI) use the given\ncertificate authority file to validate the server certificate. If a self signed\ncertificate is being used on the MongoDB server , specify the path to a copy\nof that certificate.\n  - Default value: **\"\"**\n\n- **MongodbWriter::CLIENT_CERT**:  If X.509 authentication is enabled (via the URI), specify the client certificate file.\n  - Default value: **\"\"**\n\n## Type mapping\n\nThe writer automatically maps the Bro types to the following MongoDB data\ntypes:\n\n| Bro Type                          \t| MongoDB Type                            \t|\n|-----------------------------------\t|-----------------------------------------\t|\n| bool                              \t| bool                                    \t|\n| integer (signed 64 bit)           \t| signed 64 bit integer                   \t|\n| count (unsigned 64 bit integer)   \t| signed* 64 bit integer                  \t|\n| counter (unsigned 64 bit integer) \t| signed* 64 bit integer                  \t|\n| double                            \t| double                                  \t|\n| time                              \t| double                                    |\n| interval                          \t| double                                  \t|\n| port {enum}                       \t| signed 64 bit integer                   \t|\n| addr                              \t| string                                  \t|\n| subnet                            \t| string                                  \t|\n| enum                              \t| string                                  \t|\n| string                            \t| string                                  \t|\n| func                              \t| string                                  \t|\n| file                              \t| string                                  \t|\n| set[type]                         \t| array                                   \t|\n| vector[type]                      \t| array                                   \t|\n\nEmpty but expected field have various null values place into them.\n"}