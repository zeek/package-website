{"description": "Simple, high performance tcp scan detection", "tags": "bro plugin, scan detection", "version": "4.0", "depends": null, "test_cmd": "(cd testing && btest -d)", "build_cmd": null, "url": "https://github.com/ncsa/bro-simple-scan", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "# Bro simple scan\n\nThis is the 'simplest thing that could possibly work' scan detection script for\nbro.  The entire script is about 300 lines and written to be as understandable\nas possible.\n\nWhile simple, it also tries to do the least amount of work that it needs to in\norder to detect scans.\n\nIt should work up until about 8 /16 networks before the manager is overloaded,\nbut it is possible that with the right policy it can scale even higher.  Broker\nwill enable a version to be used that scales out the analysis to multiple data\nnodes, once broker is ready.\n\n## Configuration\n\nSee the comments in scan.bro for all the tunables.  Most likely one would want\nto modify the various `threshold` variables for different environments.\n\nProperly configuring the darknet plugin as described under\nhttps://github.com/ncsa/bro-is-darknet will enable faster detection of scans.\n\nFalse positives for outbound scans for heavy bittorrent users are common, but\nthat is fixable with the right scan policy to ignore their 'scans'.\n\n## Notice policy\n\nThe notice type specific suppression intervals are used by the script in order\nto ignore further scan traffic from hosts that have set off scan notices.\n\nIf you don't care about repeat notices once per hour, set the supression\ninterval to a higher value.\n\n    redef Notice::type_suppression_intervals += {\n        [Scan::Port_Scan]           = 4hrs,\n        [Scan::Address_Scan]        = 4hrs,\n        [Scan::Random_Scan]         = 4hrs,\n    };\n\nIf you are blocking scanners using a default duration of less than 1 hour, set\nthe intervals to match.  Otherwise once the block expires, bro will still be\nignoring the scanner.\n\n## Example scan policy\n\n    # Ignore (via 'break') scan attempts for common noisy destination ports that are already blocked\n    # but don't ignore outbound scans TO these ports.\n    const ignore_scan_ports: set[port] = { 23/tcp, 445/tcp };\n\n    hook Scan::scan_policy(scanner: addr, victim: addr, scanned_port: port)\n    {\n        if ((scanned_port in ignore_scan_ports) && (!Site::is_local_addr(scanner)))\n            break;\n    }\n\n"}