{"description": "Ethernet/IP and CIP plugin for parsing and logging of the Ethernet/IP and CIP protocols - CISA ICSNPP", "tags": "enip, ENIP, cip, CIP, ics, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && btest -c btest.cfg", "build_cmd": "./configure && make", "url": "https://github.com/cisagov/icsnpp-enip", "summary": null, "script_dir": "build/scripts/icsnpp/enip", "plugin_dir": null, "readme": "# ICSNPP-ENIP\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - Ethernet/IP and CIP.\n\n## Overview\n\nICSNPP-ENIP is a Zeek plugin for parsing and logging fields within the Ethernet/IP protocol.\n\nThis plugin was developed to be fully customizable. To drill down into specific ENIP/CIP packets and log certain variables, users can add the logging functionality to [scripts/icsnpp/enip/main.zeek](scripts/icsnpp/enip/main.zeek). The functions within [scripts/icsnpp/enip/main.zeek](scripts/icsnpp/enip/main.zeek) and [src/events.bif](src/events.bif) are good guides for adding new logging functionality.\n\nThis parser produces four log files. These log files are defined in [scripts/icsnpp/enip/main.zeek](scripts/icsnpp/enip/main.zeek).\n* enip.log\n* cip.log\n* cip_io.log\n* cip_identity.log\n\nFor additional information on these log files, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manger](https://docs.zeek.org/projects/package-manager/en/stable/index.html)\n\n```bash\nzkg refresh\nzkg install icsnpp-enip\n```\n\nIf this package is installed from ZKG, it will be added to the available plugins. This can be tested by running `zeek -N`. If installed correctly, users will see `ICSNPP::ENIP`.\n\nIf ZKG is configured to load packages (see @load packages in quickstart guide), this plugin and these scripts will automatically be loaded and ready to go.\n[ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\n\nIf users are not using site/local.zeek or another site installation of Zeek and want to run this package on a packet capture, they can add `icsnpp/enip` to the command to run this plugin's scripts on the packet capture:\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-enip.git\nzeek -Cr icsnpp-enip/tests/traces/enip_cip_example.pcap icsnpp/enip\n```\n\n### Manual Install\n\nTo install this package manually, clone this repository and run the configure and make commands as shown below.\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-enip.git\ncd icsnpp-enip/\n./configure\nmake\n```\n\nIf these commands succeed, users will end up with a newly created build directory. This contains all the files needed to run/test this plugin. The easiest way to test the parser is to point the ZEEK_PLUGIN_PATH environment variable to this build directory.\n\n```bash\nexport ZEEK_PLUGIN_PATH=$PWD/build/\nzeek -N # Ensure everything compiled correctly and you are able to see ICSNPP::ENIP\n```\n\nOnce users have tested the functionality locally and it appears to have compiled correctly, they can install it system-wide:\n```bash\nsudo make install\nunset ZEEK_PLUGIN_PATH\nzeek -N # Ensure everything installed correctly and you are able to see ICSNPP::ENIP\n```\n\nTo run this plugin in a site deployment, users will need to add the line `@load icsnpp/enip` to the `site/local.zeek` file to load this plugin's scripts.\n\nIf users are not using site/local.zeek or another site installation of Zeek and want to run this package on a packet capture, they can add `icsnpp/enip` to the command to run this plugin's scripts on the packet capture:\n\n```bash\nzeek -Cr icsnpp-enip/tests/traces/enip_cip_example.pcap icsnpp/enip\n```\n\nIf users want to deploy this on an already existing Zeek implementation and don't want to build the plugin on the machine, they can extract the Zeek_Enip.tgz file to the directory of the established ZEEK_PLUGIN_PATH (default is `${ZEEK_INSTALLATION_DIR}/lib/zeek/plugins/`).\n\n```bash\ntar xvzf build/Zeek_Enip.tgz -C $ZEEK_PLUGIN_PATH \n```\n\n## Logging Capabilities\n\nIt its default configuration, this parser will only log Ethernet/IP and CIP packets on ports 2222 and 44818. This decision was made due to the false positives generated when a signature-only based detection system was used.\n\nIf users know of Ethernet/IP and CIP traffic that operate on ports other than 2222 or 44818, there are two options:\n* Allow signature detection on additional, known ports only:\n  * In [scripts/icsnpp/enip/dpd.sig](scripts/icsnpp/enip/dpd.sig): add the known Ethernet/IP and CIP port numbers to the lines: `dst-port == 2222, 44818`\n* Allow signature detection on all ports (may produce false positive):\n  * In [scripts/icsnpp/enip/dpd.sig](scripts/icsnpp/enip/dpd.sig): replace the lines: `dst-port == 2222, 44818` with `dst-port >= 1024`\n\n### ENIP Header Log (enip.log)\n\n#### Overview\n\nThis log captures Ethernet/IP header information for every Ethernet/IP packet and logs it to **enip.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                                   |\n| ----------------- |-----------|-------------------------------------------------------------- |\n| ts                | time      | Timestamp                                                     |\n| uid               | string    | Unique ID for this connection                                 |\n| id                | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig           | bool      | True if the packet is sent from the originator                |\n| source_h          | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p          | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h     | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p     | port      | Destination port (see *Source and Destination Fields*)        |\n| enip_command_code | string    | Ethernet/IP command code                                      |\n| enip_command      | string    | Ethernet/IP command name                                      |\n| length            | count     | Length of ENIP data following header                          |\n| session_handle    | string    | Session identifier                                            |\n| enip_status       | string    | Ethernet/IP status code                                       |\n| sender_context    | string    | Sender context                                                |\n| options           | string    | Options flags                                                 |\n\n### CIP Header Log (cip.log)\n\n#### Overview\n\nThis log captures CIP header information for every CIP packet and logs it to **cip.log**.\n\n#### Fields Captured\n\n| Field                     | Type      | Description                                                   |\n| ------------------------- |-----------|-------------------------------------------------------------- |\n| ts                        | time      | Timestamp                                                     |\n| uid                       | string    | Unique ID for this connection                                 |\n| id                        | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig                   | bool      | True if the packet is sent from the originator                |\n| source_h                  | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p                  | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h             | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p             | port      | Destination port (see *Source and Destination Fields*)        |\n| cip_sequence_count        | count     | CIP sequence number                                           |\n| direction                 | string    | Request or response                                           |\n| cip_service_code          | string    | CIP service code                                              |\n| cip_service               | string    | CIP service name                                              |\n| cip_status_code           | string    | CIP status code                                               |\n| cip_status                | string    | CIP status name                                               |\n| cip_extended_status_code  | string    | CIP extended status code                                      |\n| cip_extended_status       | string    | CIP extended status name                                      |\n| class_id                  | string    | CIP request path - class ID                                   |\n| class_name                | string    | CIP request path - class name                                 |\n| instance_id               | string    | CIP request path - instance ID                                |\n| attribute_id              | string    | CIP request path - attribute ID                               |\n\n### CIP I/O Log (cip_io.log)\n\n#### Overview\n\nThis log captures CIP I/O (input-output) data for every CIP IO packet and logs it to **cip_io.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                                   |\n| --------------------- |-----------|-------------------------------------------------------------- |\n| ts                    | time      | Timestamp                                                     |\n| uid                   | string    | Unique ID for this connection                                 |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig               | bool      | True if the packet is sent from the originator                |\n| source_h              | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p              | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h         | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p         | port      | Destination port (see *Source and Destination Fields*)        |\n| connection_id         | string    | Connection identifier                                         |\n| sequence_number       | count     | Sequence number within connection                             |\n| data_length           | count     | Length of data in io_data field                               |\n| io_data               | string    | CIP IO data (in hex)                                          |\n\n### CIP Identity Log (cip_identity.log)\n\n#### Overview\n\nThis log captures important variables for CIP_Identity objects and logs them to **cip_identity.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                                   |\n| --------------------- |-----------|-------------------------------------------------------------- |\n| ts                    | time      | Timestamp                                                     |\n| uid                   | string    | Unique ID for this connection                                 |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig               | bool      | True if the packet is sent from the originator                |\n| source_h              | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p              | port      | Source Port (see *Source and Destination Fields*)             |\n| destination_h         | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p         | port      | Destination Port (see *Source and Destination Fields*)        |\n| encapsulation_version | count     | Encapsulation protocol version supported                      |\n| socket_address        | addr      | Socket address IP address                                     |\n| socket_port           | count     | Socket address port number                                    |\n| vendor_id             | count     | Vendor ID                                                     |\n| vendor_name           | string    | Name of vendor                                                |\n| device_type_id        | count     | Device type ID                                                |\n| device_type_name      | string    | Name of device type                                           |\n| product_code          | count     | Product code assigned to device                               |\n| revision              | string    | Device revision (major.minor)                                 |\n| device_status         | string    | Current status of device                                      |\n| serial_number         | string    | Serial number of device                                       |\n| product_name          | string    | Human readable description of device                          |\n| device_state          | string    | Current state of the device                                   |\n\n### Source and Destination Fields\n\n#### Overview\n\nZeek's typical behavior is to focus on and log packets from the originator and not log packets from the responder. However, most ICS protocols contain useful information in the responses, so the ICSNPP parsers log both originator and responses packets. Zeek's default behavior, defined in its `id` struct, is to never switch these originator/responder roles which leads to inconsistencies and inaccuracies when looking at ICS traffic that logs responses.\n\nThe default Zeek `id` struct contains the following logged fields:\n* id.orig_h (Original Originator/Source Host)\n* id.orig_p (Original Originator/Source Port)\n* id.resp_h (Original Responder/Destination Host)\n* id.resp_p (Original Responder/Destination Port)\n\nAdditionally, the `is_orig` field is a boolean field that is set to T (True) when the id_orig fields are the true originators/source and F (False) when the id_resp fields are the true originators/source.\n\nTo not break existing platforms that utilize the default `id` struct and `is_orig` field functionality, the ICSNPP team has added four new fields to each log file instead of changing Zeek's default behavior. These four new fields provide the accurate information regarding source and destination IP addresses and ports:\n* source_h (True Originator/Source Host)\n* source_p (True Originator/Source Port)\n* destination_h (True Responder/Destination Host)\n* destination_p (True Responder/Destination Port)\n\nThe pseudocode below shows the relationship between the `id` struct, `is_orig` field, and the new `source` and `destination` fields.\n\n```\nif is_orig == True\n    source_h == id.orig_h\n    source_p == id.orig_p\n    destination_h == id.resp_h\n    destination_p == id.resp_p\nif is_orig == False\n    source_h == id.resp_h\n    source_p == id.resp_p\n    destination_h == id.orig_h\n    destination_p == id.orig_p\n```\n\n#### Example\n\nThe table below shows an example of these fields in the log files. The first log in the table represents a Modbus request from 192.168.1.10 -> 192.168.1.200 and the second log represents a Modbus reply from 192.168.1.200 -> 192.168.1.10. As shown in the table below, the `id` structure lists both packets as having the same originator and responder, but the `source` and `destination` fields reflect the true source and destination of these packets.\n\n| id.orig_h    | id.orig_p | id.resp_h     | id.resp_p | is_orig | source_h      | source_p | destination_h | destination_p |\n| ------------ | --------- |---------------|-----------|---------|---------------|----------|---------------|-------------- |\n| 192.168.1.10 | 47785     | 192.168.1.200 | 502       | T       | 192.168.1.10  | 47785    | 192.168.1.200 | 502           |\n| 192.168.1.10 | 47785     | 192.168.1.200 | 502       | F       | 192.168.1.200 | 502      | 192.168.1.10  | 47785         |\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/icsnpp-bsap)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC. Released under the terms of the 3-Clause BSD License (see [`LICENSE.txt`](./LICENSE.txt)).\n"}