{"description": "Packet source plugin that provides native support for Endace DAG card and EndaceProbe Application Dock packet capture.", "tags": "packet source, zeek plugin, plugin, broctl plugin, zeekctl plugin, dag, endace", "version": "v0.5", "depends": ["bro >=2.6.0"], "test_cmd": "( cd tests && btest -d )", "build_cmd": "( ./configure && make )", "url": "https://github.com/endace/zeek-dag", "summary": null, "script_dir": null, "plugin_dir": "build", "readme": "\nEndace::DAG\n=================================\n\nThis plugin provides native [Endace](https://www.endace.com/) DAG card and\nEndaceProbe Application Dock packet capture support for Zeek.\n\nInstallation\n--------------------\n\n### Prerequisites\n1. Ensure you have a recent [Zeek](https://www.zeek.org/download/) release\n   installed. Bro 2.6 to Zeek 4.0 have been tested. To install zeek-dag you will\n   need to have the ``zeek-devel`` or``zeek-core-dev`` package installed, or the\n   compiled source directory for Zeek available.\n\n   If you are using Bro, replace commands, directories and groups prefixed with\n   ``zeek`` with ``bro`` in the following instructions.\n\n2. Install the latest [DAG software package](https://www.endace.com/support).\n   Follow the DAG installation instructions to get its kernel module, drivers,\n   userspace libraries and development headers installed.\n\n3. If your installation of Zeek runs as a non-root user, add the ``zeek`` user\n   to the ``dag`` group to allow access to DAG cards (DAG 5.7.1 or newer):\n    ````\n    usermod -a -G dag zeek\n    ````\n\n4. Install prerequisites for building zeek-dag:\n   * Red Hat/CentOS/Fedora:\n        ````\n        yum install cmake make gcc-c++\n        ````\n   * Debian/Ubuntu:\n        ````\n        apt-get install build-essential cmake\n        ````\n\n5. If you are using Zeek 3.1 or later with Red Hat/CentOS 7, you will need a\n   newer version of the GCC compiler from the ``devtoolset-7`` package as well\n   as the newer ``cmake3`` package:\n\n   * Enable the\n     [Software Collections](https://developers.redhat.com/products/developertoolset/hello-world) and\n     [EPEL](https://fedoraproject.org/wiki/EPEL) repositories. For CentOS\n     this can be done using the following commands:\n        ````\n        yum install epel-release\n        yum install centos-release-scl\n        ````\n\n   * Install the ``devtoolset-7-toolchain`` and ``cmake3`` packages:\n        ````\n        yum install devtoolset-7-toolchain cmake3\n        ````\n\n   * Enter the devtoolset environment before installing zeek-dag. Subsequent\n     build commands will use GCC 7. *You will need to enter this environment\n     even if you are installing zeek-dag using the zkg package manager.*\n        ````\n        scl enable devtoolset-7 bash\n        ````\n\n### Installation using zkg/bro-pkg package manager\nEnsure you have\n[zkg](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\ninstalled and configured.\n\nIf you have previously installed zeek-dag under the name ``bro-dag`` you will\nneed to remove it first using ``zkg remove bro-dag``.\n\nInstall zeek-dag using zkg:\n\n    zkg install endace/zeek-dag\n\nTo uninstall use:\n\n    zkg remove zeek-dag\n\n### Manual Installation\nAfter building Zeek from the sources, run:\n\n    git clone https://github.com/endace/zeek-dag.git\n    cd zeek-dag\n    ./configure --zeek-dist=<path to zeek sources>\n    make && sudo make install\n\nIf you encounter build errors, run ``make distclean`` and ensure you have an\nappropriate build environment before running configure and make again.\n\nTo uninstall use:\n\n    make uninstall\n\n### Test\nCheck the zeek-dag packet source can be loaded successfully. If everything built\nand installed correctly, you should see this:\n\n    $ zeek -N Endace::DAG\n    Endace::DAG - Packet acquisition via Endace DAG capture cards (dynamic, version 0.4)\n\nOnce installed, you can use DAG card streams by prefixing them with ``endace::``\non the command line. Note that Zeek will write output files to the current\ndirectory by default.\n\nFor example, to capture from\nDAG card 0:\n\n    zeek -i endace::dag0\n\nTo capture from DAG card 1, stream 2:\n\n    zeek -i endace::dag1:2\n\nUsage with ``zeekctl``\n----------------------\n\n> *Note:* This plugin does not configure hardware load balancing on the DAG\n> card. Use the DAG software tools to configure the card before use.\n>\n> For example to configure 2-tuple (src/dst IP) load balancing for 8 worker\n> processes on physical DAG card dag1:\n>\n> ````\n> dagconfig -d1 hash_tuple=2 hash_bins=8\n> ````\n>\n> For information on configuring hash load balancing to multiple vDAGs in\n> EndaceProbe Application Dock, please refer to the\n> [EndaceProbe User Guide](https://www.endace.com/support).\n\nTo use zeek-dag in production with multiple Zeek processes, use a worker\nconfiguration similar to this in node.cfg (e.g. /opt/zeek/etc/node.cfg):\n\n```` ini\n[worker-1]\ntype=worker\nhost=localhost\nlb_method=custom\nlb_procs=8\ndag_lb_method=stream\ninterface=endace::dag0\n## Optionally pin worker threads\n#pin_cpus=0,1,2,3,4,5,6,7\n````\n\nWhere ``lb_procs`` is the number of processes for load balancing. DAG cards\nsupport up to 32 streams/procs for load balancing in hardware, as well as\nhardware packet filtering and flexible steering of up to 4 capture\nports/interfaces to streams\n(see [DAG documentation](https://www.endace.com/support)).\n\nThe ``dag_lb_method`` node.cfg option can be used to specify the DAG load\nbalancing method. This is set to ``stream`` by default if not specified, and\nneeds to be set for each worker section. Load balancing stream numbering is\nreset between worker sections unless they have identical interface configuration\nand the same host.\n\n   * ``stream`` (default): Load balance receive (even numbered) streams on a\n     single DAG card. The load balancing will start at 0 or the specified stream\n     number.\n   * ``card``: Load balance multiple DAG cards, each with a single stream. This\n     configuration is commonly used for vDAGs inside Application Dock. The load\n     balancing will start at the specified DAG card number, capturing on stream\n     0 or the specified stream on each DAG card.\n\n### Load Balancing by Card\n\nTo use multiple DAG cards each with one stream, as commonly used for vDAGs\ninside Application Dock, use ``dag_lb_method=card``. For example, to load\nbalance across 8 DAGs dag0-dag7 use:\n\n```` ini\n[worker-1]\ntype=worker\nhost=localhost\nlb_method=custom\nlb_procs=8\ndag_lb_method=card\ninterface=endace::dag0\n## Optionally pin worker threads\n#pin_cpus=0,1,2,3,4,5,6,7\n````\n\n### Deploy Configuration\nNow start the ZeekControl shell:\n\n    zeekctl\n\nAnd start the Zeek instances:\n\n    [ZeekControl] > deploy\n\nOr simply:\n\n    zeekctl deploy\n\nPackaging\n---------\n### Debian/RPM packages\nBasic binary-only packages can be generated as follows if you have rpmbuild\nand/or Debian build tools installed. Distributing these packages outside a\nclosed environment is not recommended, as Zeek package installation locations\nvary.\n\n    ./configure --zeek-dist=<path to zeek sources after building>\n    cd build/\n    make package\n\nPackages add the zeek user to the dag group if it exists.\n\nIf Zeek packages are installed as ``zeek-lts`` add the configure option ``--zeek-package-name=zeek-lts``.\n\n### Tarball\nFrom a *completely clean* (i.e. no untracked files) git checkout:\n\n    ./configure --zeek-dist=<path to zeek sources>\n    cd build/\n    make package_sources\n"}