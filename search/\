from numpy import log as ln


def rank(documents: [], query: str) -> []:
    scores = []
    idfs = get_idfs(documents, query)
    avgdl = get_avgdl(documents)
    query = query.split()

    for document in documents:
        scores.append(score(document, query, avgdl, idfs))

    return scores


def score(document, query, avdgl, idfs):
    score = 0

    for term in query:
        score += score_helper(document, term, idfs)

    return score


def score_helper(document: str, term: str, avgdl: int, idfs) -> int:

    frequency = get_frequency(document, term)
    idf = idfs.get(term)
    k1 = 1.6 # k1 is a free value anywhere from 1.2 to 2
    b = 0.75 # b is a free value that is commonly 0.75

    score = ((frequency * (k + 1)) /
             (frequency + k1 * ( 1 - b + b * len(document) / avgdl)))

    return idf * score


def get_frequency(document: str, term: str) -> int:

    frequency = 0

    for word in document:
        if word.lower() == term:
            frequency += 1

    return frequency


def get_idfs(documents: [], query: str) -> dict:
    idfs = {}

    for term in query:
        idfs.update({term: get_idfs_helper(documents, term)})


def get_idfs_helper(documents: [], term: str) -> int:
    document_frequency = 0

    for document in documents:
        if term in document:
            document_frequency += 1

    return ln(((len(documents) - document_frequency + 0.5) /
               (document_frequency + 0.5)) + 1)
