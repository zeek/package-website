{"description": "A package to create a fingerprint of SMB clients", "tags": "smb, fingerprint", "version": "master", "depends": null, "test_cmd": null, "build_cmd": null, "url": "https://github.com/micrictor/smbfp", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "\nSMBFP\nSMB Fingerprinting Zeek package\n=================================\n\n## Purpose\nThis package will generate a fingerprint based upon observed values from the SMB negotation process, in a similar fashion to JA3 for TLS. This may be used to generate alerts for known-bad fingerprints (blacklist), as well as identify abnormal SMB clients (whitelist).\n\n*WARNING* _Fingerprints generated may change in a future release_. At this time, this package is still incredibly bleeding edge, and I continue to refine which fields are used to generate the fingerprint. \n\n## Fields used to generate fingerprint\nIn order to fingerprint SMB clients, I had to determine which fields could possibly change based on the client software used. \n \n\nSMB1 Fields used:\n \n* dialects - Strings that declare what versions of SMB the client supports\n* max_buffer_len - Maxiumum buffer size for SMB messages supported by the client\n* max_mpx_count - Maximum amount of open SMB commands the client supports at a single time (mpx = multiplex)\n* native_os - A string that describes the OS of the client; Similar to an HTTP User Agent.\n* native_lanman - The client's native LAN Manager type; Essentially the same as above\n* primary_domain - The primary domain as specified by the client; rarely set\n* capabilities.unicode - Whether or not the client supports unicode; Interesting because Windows clients always do\n* capabilities.level_2_oplocks - Whether or not the client supports read-only opportunistic locking; default on in Windows since XP \n \nSMB2 Fields used:\n\n* dialects - Integers that declare what versions of SMB the client supports\n\n## TODO\n\n* Submit patch to Zeek to include capabilities in smb2_negotiate_request event"}