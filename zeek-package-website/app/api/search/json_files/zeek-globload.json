{"description": "This plugin adds support for shell-style glob", "tags": null, "version": "1.0.0", "depends": null, "test_cmd": "cd testing && btest -c btest.cfg", "build_cmd": "./configure && cd build && make", "url": "https://github.com/corelight/zeek-globload", "summary": "Support file globbing in @load directives", "script_dir": null, "plugin_dir": null, "readme": "# GlobLoad: glob patterns for Zeek's `@load` directive\n\n[![Zeek matrix tests](https://github.com/corelight/zeek-globload/actions/workflows/zeek-matrix.yml/badge.svg)](https://github.com/corelight/zeek-globload/actions/workflows/zeek-matrix.yml)\n[![Zeek nightly build](https://github.com/corelight/zeek-globload/actions/workflows/zeek-nightly.yml/badge.svg)](https://github.com/corelight/zeek-globload/actions/workflows/zeek-nightly.yml)\n\nThis Zeek package extends the functionality of the `@load` directive\nto support loading scripts via glob patterns. Among other things, this\nallows you to construct \"`.d/`\"-style directories in which you\ndecentralize control over the script contents, for example by allowing all\nmembers of a UNIX group to write to the directory.\n\n## Usage\n\nUse a glob pattern where you'd normally point Zeek at a file or\ndirectory:\n\n```\n@load scripts.d/*.zeek\n```\n\nYou can provide absolute paths, or relative paths that will be\nevaluated relative to the script containing the globbed `@load`.\n\nThe set of scripts that match the glob pattern gets sorted\nalphabetically and loaded in that order, as if provided to `@load`\nindividually. Glob matches need not be files: they can also be\nsymlinks, directories, etc.\n\n## Quirks\n\nThere's a small side-effect due to the way the package hooks into\n`@load`: you'll notice an \"Empty Zeekygen script doc dependency\"\nwarning for each use of a glob. That's because Zeek internally builds\nup dependencies between scripts, the glob patterns themselves aren't\nfiles, and the package cannot control the code path that triggers the\nwarnings. Unless you care about this aspect of Zeekygen documentation\ngeneration, you can ignore these.\n"}