{"description": "ZeroMQ log writer.", "tags": "bro plugin, log writer, zeromq, zmq, 0mq, json", "version": null, "depends": null, "test_cmd": "make test", "build_cmd": "./configure --bro-dist=%(bro_dist)s --with-zmq=%(ZEROMQ_PREFIX)s && make", "url": null, "summary": null, "script_dir": "scripts/NCSA/ZeroMQWriter", "plugin_dir": null, "readme": "Bro ZeroMQ Log Writer Plugin\n============================\n\nA Bro log writer that sends logging output using ZeroMQ.\n\nThis plugin uses the ZeroMQ \"publish-subscribe\" pattern, where Bro is\nthe publisher and a user-provided program is the subscriber.\n\nBro publishes each log record as a ZeroMQ multi-part message containing\ntwo parts:  the first part contains the Bro log path (e.g. \"conn\"), and the\nsecond part contains the log record in JSON format.  The first message part\nis needed so that the subscriber knows which type of log record is\nbeing received, and to allow subscribing to logs based on the Bro log path.\n\n\nPrerequisites\n-------------\n\nThis Bro plugin should be compatible with any recent release of ZeroMQ\nand Bro.\n\nBefore attempting to install this plugin, make sure you have installed\nZeroMQ (http://zeromq.org) and Bro.  You will also need to obtain\nthe Bro source and build Bro (the source and installed versions of Bro must be\nthe same).\n\n\nInstalling\n----------\n\nThis plugin can be installed as a Bro package using the Bro Package Manager\n(see http://bro-package-manager.readthedocs.io).\n\nAlternatively, to build this plugin from source, use the following commands\n(replace BRO_SRC_DIR with the top-level directory of the Bro source code):\n\n    # ./configure --bro-dist=BRO_SRC_DIR\n    # make\n    # sudo make install\n\nIf the configure script fails to find ZeroMQ, then use the \"--with-zmq\"\noption to specify the prefix directory of the ZeroMQ installation.\n\nIn order to verify that the plugin was installed correctly, run the\ncommand \"bro -N\" and look for the ZeroMQ log writer in the output.\n\n\nConfiguration\n-------------\n\nIn order to enable logging to ZeroMQ, you must ensure that the plugin helper\nscript gets loaded and you must specify a subscriber endpoint where logs will\nbe sent.\n\nHere is an example that you can add to your local.bro (note that if you\ninstalled this plugin with the Bro package manager and if you're\nusing \"@load packages\" then you must omit the \"@load\" directive in all\nexamples below).  Be sure to change the example hostname and TCP port number\nto the correct values for your subscriber endpoint:\n\n    @load NCSA/ZeroMQWriter\n    redef LogZeroMQ::endpoint = \"tcp://localhost:12345\";\n\nAfter running \"broctl deploy\", Bro will write all logs to the specified\nendpoint using ZeroMQ.  Note that all logs will also be written to disk,\nunless you've specifically configured Bro otherwise.\n\nIf you don't want to send all logs, then you can specify which ones to send.\nFor example:\n\n    @load NCSA/ZeroMQWriter\n    redef LogZeroMQ::endpoint = \"tcp://localhost:12345\";\n    redef LogZeroMQ::send_logs += { HTTP::LOG, Files::LOG };\n\nAfter running \"broctl deploy\", Bro will write the \"HTTP\" and \"Files\"\nlogs to the specified endpoint using ZeroMQ.\n\nInstead of specifying which logs to send via ZeroMQ, one could instead specify\nwhich logs to not send (all others will be sent).  To do this, just replace\n\"send_logs\" with \"excluded_log_ids\":\n\n    @load NCSA/ZeroMQWriter\n    redef LogZeroMQ::endpoint = \"tcp://localhost:12345\";\n    redef LogZeroMQ::excluded_log_ids += { Conn::LOG, DNS::LOG };\n\n\nZeroMQ Endpoints\n----------------\n\nA ZeroMQ endpoint always has the form \"transport://address\", where \"transport\"\nis a transport protocol that ZeroMQ recognizes (such as \"tcp\" or \"ipc\"),\nand \"address\" is a transport-specific address.  For the \"tcp\" transport\nprotocol, an address consists of a hostname or IP address followed by a colon,\nand then a TCP port number.  For the \"ipc\" transport, an address is the\npathname to a UNIX domain socket.\n\nHere are some examples of valid endpoints:  \"tcp://localhost:1234\",\n\"tcp://10.1.2.3:4444\", \"ipc:///var/tmp/mysocket\".\n\n\nLogging to Multiple Subscribers\n-------------------------------\n\nIf you want to send logs to more than one subscriber, then you will need to\nadd log filters using the \"add_filter\" function, being careful to specify\na value for the subscriber endpoint in the \"config\" field of each log filter.\nIn the following example, a new filter is added to the DNS and HTTP log\nstreams:\n\n    @load NCSA/ZeroMQWriter\n    redef LogZeroMQ::endpoint = \"tcp://localhost:12345\";\n    redef LogZeroMQ::send_logs += { HTTP::LOG, DNS::LOG, Files::LOG };\n\n    event bro_init() &priority=-10\n        {\n        local remote_filter_dns: Log::Filter = [\n            $name = \"remote-zmq\",\n            $writer = Log::WRITER_ZEROMQ,\n            $interv = 0 sec,\n            $config = table([\"endpoint\"] = \"tcp://10.1.2.3:44000\")\n        ];\n\n        local remote_filter_http: Log::Filter = [\n            $name = \"remote-zmq\",\n            $writer = Log::WRITER_ZEROMQ,\n            $interv = 0 sec,\n            $config = table([\"endpoint\"] = \"tcp://10.1.2.3:44000\")\n        ];\n\n        Log::add_filter(DNS::LOG, remote_filter_dns);\n        Log::add_filter(HTTP::LOG, remote_filter_http);\n        }\n\nAfter running \"broctl deploy\", Bro will write the \"HTTP\", \"DNS\", and \"Files\"\nlogs to a subscriber on the localhost, and the \"HTTP\" and \"DNS\" logs will\nalso be written to a subscriber on another host.\n\nKeep in mind that when you add a log filter with the same log path as an\nexisting filter (this is applicable to the DNS and HTTP log streams in\nthis example), then Bro will append a string of the form \"-N\", where N is\nan integer, to the end of the log path so that each filter has its own\nunique log path (in the example above, the remote subscriber would see\nlog paths of \"dns-2\" and \"http-2\").\n\n\nHow to Avoid Losing Log Messages\n--------------------------------\n\nZeroMQ will drop messages before a connection to a subscriber has been\nsuccessfully established.  This means if you start Bro before starting\na subscriber, then log records intended to be written via ZeroMQ will be\ndropped until Bro is able to connect to the subscriber.  Therefore, in\norder to avoid losing log records, it is important to make\nsure your subscribers are running before attempting to start Bro.\n\nOnce a connection to a subscriber is established, then if it is interrupted,\nZeroMQ will queue unsent messages in memory and they will all be sent when the\nconnection is re-established.  The maximum number of messages that will be\nqueued in memory in such circumstances is called the high water mark (once\nthe limit is reached, messages are dropped).  The default value is 1000 but\ncan be changed like this:\n\n    redef LogZeroMQ::zmq_hwm = 25000;\n\nHowever, if Bro terminates before an interrupted connection is\nre-established, then all unsent log records are discarded.  In order to\navoid this, make sure your subscribers are running before issuing\nthe BroControl \"stop\", \"restart\", or \"deploy\" commands.  You can specify\nthe maximum amount of time that Bro will wait before terminating until all\nunsent logs are sent by specifying the linger time (specified in milliseconds):\n\n    redef LogZeroMQ::zmq_linger = 3000;\n\nIn this example, if there are any unsent logs when Bro decides to\nterminate, then Bro will wait up to 3 seconds before giving up and discarding\nall remaining unsent logs.\n"}