{"description": "A Zeek log writer plugin that publishes to Kafka.", "tags": "log writer, zeek plugin, kafka", "version": null, "depends": null, "test_cmd": "cd tests && btest -d", "build_cmd": "./configure --with-librdkafka=%(LIBRDKAFKA_ROOT)s && make", "url": null, "summary": null, "script_dir": "build/scripts/Seiso/Kafka", "plugin_dir": "build", "readme": "# Logging Zeek Output to Kafka\n\nA Zeek log writer that sends logging output to Kafka.  This provides a convenient means for tools in the Hadoop ecosystem, such as Storm, Spark, and others, to process the data generated by Zeek.\n\nThis software is a part of the [Apache Metron](https://metron.apache.org/) project which integrates a variety of open source, big data technologies to offer a platform to detect and respond to cyber threats at-scale.\n\n* [Installation](#installation)\n* [Activation](#activation)\n* [Settings](#settings)\n* [Kerberos](#kerberos)\n* [Contributing](#contributing)\n\n## Installation\n\n### `zkg` Installation\n\n`zkg` is the preferred mechanism for installing this plugin, as it will dynamically retrieve, build, test, and load the plugin.  Note, that you will still need to [activate](#activation) and configure the plugin after your installation.\n\n1. Install [librdkafka](https://github.com/edenhill/librdkafka), a native client library for Kafka.  This plugin has been tested against librdkafka v1.4.2.\n\n    In order to use this plugin within a kerberized Kafka environment, you will also need `libsasl2` installed and will need to pass `--enable-sasl` to the `configure` script.\n\n    ```\n    $ curl -L https://github.com/edenhill/librdkafka/archive/v1.4.2.tar.gz | tar xvz\n    $ cd librdkafka-1.4.2/\n    $ ./configure --enable-sasl\n    $ make\n    $ sudo make install\n    ```\n\n1. Configure `zkg` by following the quickstart guide [here](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html).\n\n1. Install the plugin using `zkg install`.\n\n    ```\n    $ zkg install apache/metron-bro-plugin-kafka --version master\n    The following packages will be INSTALLED:\n      zeek/apache/metron-bro-plugin-kafka (master)\n\n    Verify the following REQUIRED external dependencies:\n    (Ensure their installation on all relevant systems before proceeding):\n      from zeek/apache/metron-bro-plugin-kafka (master):\n        librdkafka ~1.4.2\n\n    Proceed? [Y/n]\n    zeek/apache/metron-bro-plugin-kafka asks for LIBRDKAFKA_ROOT (Path to librdkafka installation tree) ? [/usr/local/lib]\n    Saved answers to config file: /home/jonzeolla/.zkg/config\n    Running unit tests for \"zeek/apache/metron-bro-plugin-kafka\"\n    all 10 tests successful\n\n\n    Installing \"zeek/apache/metron-bro-plugin-kafka\"........\n    Installed \"zeek/apache/metron-bro-plugin-kafka\" (master)\n    Loaded \"zeek/apache/metron-bro-plugin-kafka\"\n    ```\n\n1. Run the following command to ensure that the plugin was installed successfully.\n\n    ```\n    $ zeek -N Apache::Kafka\n    Apache::Kafka - Writes logs to Kafka (dynamic, version 0.3.0)\n    ```\n\n### Manual Installation\n\nManually installing the plugin should *only* occur in situations where installing and configuring `zkg` is not reasonable.  If you are running zeek in an environment where you do not have Internet connectivity, investigate [bundles](https://docs.zeek.org/projects/package-manager/en/stable/zkg.html#bundle) or creating an internal [package source](https://docs.zeek.org/projects/package-manager/en/stable/source.html).\n\nThese instructions could also be helpful if you were interested in distributing this as a package (such as a deb or rpm).\n\n1. Install [librdkafka](https://github.com/edenhill/librdkafka), a native client library for Kafka.  This plugin has been tested against librdkafka v1.4.2.\n\n    In order to use this plugin within a kerberized Kafka environment, you will also need `libsasl2` installed and will need to pass `--enable-sasl` to the `configure` script.\n\n    ```\n    $ curl -L https://github.com/edenhill/librdkafka/archive/v1.4.2.tar.gz | tar xvz\n    $ cd librdkafka-1.4.2/\n    $ ./configure --enable-sasl\n    $ make\n    $ sudo make install\n    ```\n\n1. Build the plugin using the following commands.\n\n    ```\n    $ ./configure --with-librdkafka=$librdkafka_root\n    $ make\n    $ sudo make install\n    ```\n\n1. Run the following command to ensure that the plugin was installed successfully.\n\n    ```\n    $ zeek -N Apache::Kafka\n    Apache::Kafka - Writes logs to Kafka (dynamic, version 0.3.0)\n    ```\n\n## Activation\n\nThe following examples highlight different ways that the plugin can be used.  Simply add the Zeek script language to your `local.zeek` file (for example, `/usr/share/zeek/site/local.zeek`) as shown to demonstrate the example.\n\nIn addition to activating the plugin, when running Zeek in a cluster it is highly recommended to leverage one or more Zeek [loggers](https://docs.zeek.org/en/v3.1.2/cluster/index.html#logger) as shown [here](https://docs.zeek.org/en/v3.1.2/configuration/index.html#basic-cluster-configuration) to separate logging activities from the manager thread.\n\n### Example 1 - Send a list of logs to kafka\n\nThe goal in this example is to send all HTTP and DNS records to a Kafka topic named `zeek`.\n * Any configuration value accepted by librdkafka can be added to the `kafka_conf` configuration table.  \n * The `topic_name` will default to send all records to a single Kafka topic called 'zeek'.\n * Defining `logs_to_send` will send the HTTP and DNS records to the brokers specified in your `Kafka::kafka_conf`.\n```\n@load packages/metron-bro-plugin-kafka/Apache/Kafka\nredef Kafka::logs_to_send = set(HTTP::LOG, DNS::LOG);\nredef Kafka::kafka_conf = table(\n    [\"metadata.broker.list\"] = \"server1.example.com:9092,server2.example.com:9092\"\n);\n```\n\n### Example 2 - Send all active logs\n\nThis plugin has the ability send all active logs to the \"zeek\" kafka topic with the following configuration.\n\n```\n@load packages/metron-bro-plugin-kafka/Apache/Kafka\nredef Kafka::send_all_active_logs = T;\nredef Kafka::kafka_conf = table(\n    [\"metadata.broker.list\"] = \"localhost:9092\"\n);\n```\n\n### Example 3 - Send all active logs with exclusions\n\nYou can also specify a blacklist of zeek logs to ensure they aren't being sent to kafka regardless of the `Kafka::send_all_active_logs` and `Kafka::logs_to_send` configurations.  In this example, we will send all of the enabled logs except for the Conn log.\n\n```\n@load packages/metron-bro-plugin-kafka/Apache/Kafka\nredef Kafka::send_all_active_logs = T;\nredef Kafka::logs_to_exclude = set(Conn::LOG);\nredef Kafka::topic_name = \"zeek\";\nredef Kafka::kafka_conf = table(\n    [\"metadata.broker.list\"] = \"localhost:9092\"\n);\n```\n\n### Example 4 - Send each zeek log to a unique topic\n\nIt is also possible to send each log stream to a uniquely named topic.  The goal in this example is to send all HTTP records to a Kafka topic named `http` and all DNS records to a separate Kafka topic named `dns`.\n * The `topic_name` value must be set to an empty string.\n * The `$path` value of Zeek's Log Writer mechanism is used to define the topic name.\n * Any configuration value accepted by librdkafka can be added to the `$config` configuration table.  \n * Each log writer accepts a separate configuration table.\n\n```\n@load packages/metron-bro-plugin-kafka/Apache/Kafka\nredef Kafka::topic_name = \"\";\nredef Kafka::tag_json = T;\n\nevent zeek_init() &priority=-10\n{\n    # handles HTTP\n    local http_filter: Log::Filter = [\n        $name = \"kafka-http\",\n        $writer = Log::WRITER_KAFKAWRITER,\n        $config = table(\n                [\"metadata.broker.list\"] = \"localhost:9092\"\n        ),\n        $path = \"http\"\n    ];\n    Log::add_filter(HTTP::LOG, http_filter);\n\n    # handles DNS\n    local dns_filter: Log::Filter = [\n        $name = \"kafka-dns\",\n        $writer = Log::WRITER_KAFKAWRITER,\n        $config = table(\n                [\"metadata.broker.list\"] = \"localhost:9092\"\n        ),\n        $path = \"dns\"\n    ];\n    Log::add_filter(DNS::LOG, dns_filter);\n}\n```\n\n### Example 5 - Zeek log filtering\n\nYou may want to configure zeek to filter log messages with certain characteristics from being sent to your kafka topics.  For instance, Apache Metron currently doesn't support IPv6 source or destination IPs in the default enrichments, so it may be helpful to filter those log messages from being sent to kafka (although there are [multiple ways](#notes) to approach this).  In this example we will do that that, and are assuming a somewhat standard zeek kafka plugin configuration, such that:\n * All zeek logs are sent to the default `zeek` topic.\n * Each JSON message is tagged with the appropriate log type (such as `http`, `dns`, or `conn`), by setting `Kafka::tag_json` to true.\n * If the log message contains a 128 byte long source or destination IP address, the log is not sent to kafka.\n\n```\n@load packages/metron-bro-plugin-kafka/Apache/Kafka\nredef Kafka::tag_json = T;\n\nevent zeek_init() &priority=-10\n{\n    # handles HTTP\n    Log::add_filter(HTTP::LOG, [\n        $name = \"kafka-http\",\n        $writer = Log::WRITER_KAFKAWRITER,\n        $pred(rec: HTTP::Info) = { return ! (( |rec$id$orig_h| == 128 || |rec$id$resp_h| == 128 )); },\n        $config = table(\n            [\"metadata.broker.list\"] = \"localhost:9092\"\n        )\n    ]);\n\n    # handles DNS\n    Log::add_filter(DNS::LOG, [\n        $name = \"kafka-dns\",\n        $writer = Log::WRITER_KAFKAWRITER,\n        $pred(rec: DNS::Info) = { return ! (( |rec$id$orig_h| == 128 || |rec$id$resp_h| == 128 )); },\n        $config = table(\n            [\"metadata.broker.list\"] = \"localhost:9092\"\n        )\n    ]);\n\n    # handles Conn\n    Log::add_filter(Conn::LOG, [\n        $name = \"kafka-conn\",\n        $writer = Log::WRITER_KAFKAWRITER,\n        $pred(rec: Conn::Info) = { return ! (( |rec$id$orig_h| == 128 || |rec$id$resp_h| == 128 )); },\n        $config = table(\n            [\"metadata.broker.list\"] = \"localhost:9092\"\n        )\n    ]);\n}\n```\n\n#### Notes\n * `logs_to_send` is mutually exclusive with `$pred`, thus for each log you want to set `$pred` on, you must individually setup a `Log::add_filter` and refrain from including that log in `logs_to_send`.\n * The [`is_v6_addr()`](https://docs.zeek.org/en/v3.1.2/scripts/base/bif/zeek.bif.zeek.html#id-is_v6_addr) function can also be used in your `$pred` to identify if an IP address is IPv6.\n * Alternatively, if you are using Apache Metron to pull from the specified kafka topic, you could filter the IPv6 logs [using Stellar](https://metron.apache.org/current-book/metron-stellar/stellar-common/index.html#IS_IP).  In that case Stellar would filter the logs out and a `$pred` would not be necessary.  The benefit to this approach is that kafka would receive an unfiltered set of logs.\n\n### Example 6 - Sending a log to multiple topics\n\nYou are able to send a single zeek log to multiple different kafka topics in the same kafka cluster by overriding the default topic (configured with `Kafka::topic_name`) by creating a custom zeek `Log::Filter`.  In this example, the DHCP, RADIUS, and DNS logs are sent to the \"zeek\" topic; the RADIUS log is duplicated to the \"shew_zeek_radius\" topic; and the DHCP log is duplicated to the \"shew_zeek_dhcp\" topic.\n\n```\n@load packages/metron-bro-plugin-kafka/Apache/Kafka\nredef Kafka::logs_to_send = set(DHCP::LOG, RADIUS::LOG, DNS::LOG);\nredef Kafka::topic_name = \"zeek\";\nredef Kafka::kafka_conf = table(\n    [\"metadata.broker.list\"] = \"server1.example.com:9092,server2.example.com:9092\"\n);\nredef Kafka::tag_json = T;\n\nevent zeek_init() &priority=-10\n{\n    # Send RADIUS to the shew_zeek_radius topic\n    local shew_radius_filter: Log::Filter = [\n        $name = \"kafka-radius-shew\",\n        $writer = Log::WRITER_KAFKAWRITER,\n        $path = \"shew_zeek_radius\"\n        $config = table([\"topic_name\"] = \"shew_zeek_radius\")\n    ];\n    Log::add_filter(RADIUS::LOG, shew_radius_filter);\n\n    # Send DHCP to the shew_zeek_dhcp topic\n    local shew_dhcp_filter: Log::Filter = [\n        $name = \"kafka-dhcp-shew\",\n        $writer = Log::WRITER_KAFKAWRITER,\n        $path = \"shew_zeek_dhcp\"\n        $config = table([\"topic_name\"] = \"shew_zeek_dhcp\")\n    ];\n    Log::add_filter(DHCP::LOG, shew_dhcp_filter);\n}\n```\n\n_Note_:  Because `Kafka::tag_json` is set to True in this example, the value of `$path` is used as the tag for each `Log::Filter`. If you were to add a log filter with the same `$path` as an existing filter, Zeek will append \"-N\", where N is an integer starting at 2, to the end of the log path so that each filter has its own unique log path. For instance, the second instance of `conn` would become `conn-2`.\n\n### Example 7 - Add static values to each outgoing Kafka message\nIt is possible to define name value pairs and have them added to each outgoing Kafka json message when tagged_json is set to true.  Each will be added to the root json object.\n    * the Kafka::additional_message_values table can be configured with each name and value\n    * based on the following configuration, each outgoing message will have \"FIRST_STATIC_NAME\": \"FIRST_STATIC_VALUE\", \"SECOND_STATIC_NAME\": \"SECOND_STATIC_VALUE\" added.\n```\n@load packages\nredef Kafka::logs_to_send = set(HTTP::LOG, DNS::LOG, Conn::LOG, DPD::LOG, FTP::LOG, Files::LOG, Known::CERTS_LOG, SMTP::LOG, SSL::LOG, Weird::LOG, Notice::LOG, DHCP::LOG, SSH::LOG, Software::LOG, RADIUS::LOG, X509::LOG, RFB::LOG, Stats::LOG, CaptureLoss::LOG, SIP::LOG);\nredef Kafka::topic_name = \"zeek\";\nredef Kafka::tag_json = T;\nredef Kafka::kafka_conf = table([\"metadata.broker.list\"] = \"kafka-1:9092,kafka-2:9092\");\nredef Kafka::additional_message_values = table([\"FIRST_STATIC_NAME\"] = \"FIRST_STATIC_VALUE\", [\"SECOND_STATIC_NAME\"] = \"SECOND_STATIC_VALUE\");\nredef Kafka::logs_to_exclude = set(Conn::LOG, DHCP::LOG);\nredef Known::cert_tracking = ALL_HOSTS;\nredef Software::asset_tracking = ALL_HOSTS;\n```\n\n## Settings\n\n### `logs_to_send`\n\nA set of logs to send to kafka.\n\n```\nredef Kafka::logs_to_send = set(Conn::LOG, DHCP::LOG);\n```\n\n### `send_all_active_logs`\n\nIf true, all active logs will be sent to kafka other than those specified in\n`logs_to_exclude`.\n\n```\nredef Kafka::send_all_active_logs = T;\n```\n\n### `logs_to_exclude`\n\nA set of logs to exclude from being sent to kafka.\n\n```\nredef Kafka::logs_to_exclude = set(Conn::LOG, DNS::LOG);\n```\n\n### `topic_name`\n\nThe name of the topic in Kafka where all Zeek logs will be sent to.\n\n```\nredef Kafka::topic_name = \"zeek\";\n```\n\n### `kafka_conf`\n\nThe global configuration settings for Kafka.  These values are passed through\ndirectly to librdkafka.  Any valid librdkafka settings can be defined in this\ntable.  The full set of valid librdkafka settings are available\n[here](https://github.com/edenhill/librdkafka/blob/v1.4.2/CONFIGURATION.md).\n\n```\nredef Kafka::kafka_conf = table(\n    [\"metadata.broker.list\"] = \"localhost:9092\",\n    [\"client.id\"] = \"zeek\"\n);\n```\n\n### `additonal_message_values`\n\nA table of of name value pairs.  Each item in this table will be added to each outgoing message\nat the root level if tag_json is set to T.\n\n```\nredef Kafka::additional_message_values = table(\n    [\"FIRST_STATIC_NAME\"] = \"FIRST_STATIC_VALUE\",\n    [\"SECOND_STATIC_NAME\"] = \"SECOND_STATIC_VALUE\"\n);\n```\n\n### `tag_json`\n\nIf true, a log stream identifier is appended to each JSON-formatted message. For\nexample, a Conn::LOG message will look like `{ 'conn' : { ... }}`.\n\n```\nredef Kafka::tag_json = T;\n```\n\n### `json_timestamps`\n\nUses Ascii log writer for timestamp format. Default is `JSON::TS_EPOCH`. Other\noptions are `JSON::TS_MILLIS` and `JSON::TS_ISO8601`.\n\n```\nredef Kafka::json_timestamps = JSON::TS_ISO8601;\n```\n\n### `max_wait_on_shutdown`\n\nThe maximum number of milliseconds that the plugin will wait for any backlog of\nqueued messages to be sent to Kafka before forced shutdown.\n\n```\nredef Kafka::max_wait_on_shutdown = 3000;\n```\n\n### `debug`\n\nA comma separated list of debug contexts in librdkafka which you want to\nenable.  The available contexts are:\n* all\n* generic\n* broker\n* topic\n* metadata\n* feature\n* queue\n* msg\n* protocol\n* cgrp\n* security\n* fetch\n* feature\n* interceptor\n* plugin\n* consumer\n* admin\n\n## Kerberos\n\nThis plugin supports producing messages from a kerberized kafka.  There\nare a couple of prerequisites and a couple of settings to set.  \n\n### SASL\nIf you are using SASL as a security protocol for kafka, then you must have\nlibsasl or libsasl2 installed.  You can tell if sasl is enabled by\nrunning the following from the directory in which you have build\nlibrdkafka:\n```\nexamples/rdkafka_example -X builtin.features\nbuiltin.features = gzip,snappy,ssl,sasl,regex\n```\n\n### Producer Config\n\nAs stated above, you can configure the producer kafka configs in\n`${ZEEK_HOME}/share/zeek/site/local.zeek`.  There are a few configs\nnecessary to set, which are described\n[here](https://github.com/edenhill/librdkafka/wiki/Using-SASL-with-librdkafka).\nFor an environment where the following is true:\n* The broker is `node1:6667`\n* This kafka is using `SASL_PLAINTEXT` as the security protocol\n* The keytab used is the `metron` keytab\n* The service principal for `metron` is `metron@EXAMPLE.COM`\n\nThe kafka topic `zeek` has been given permission for the `metron` user to\nwrite:\n```\n# login using the metron user\nkinit -kt /etc/security/keytabs/metron.headless.keytab metron@EXAMPLE.COM\n${KAFKA_HOME}/kafka-broker/bin/kafka-acls.sh --authorizer kafka.security.auth.SimpleAclAuthorizer --authorizer-properties zookeeper.connect=node1:2181 --add --allow-principal User:metron --topic zeek\n```\n\nThe following is how the `${ZEEK_HOME}/share/zeek/site/local.zeek` looks:\n```\n@load packages/metron-bro-plugin-kafka/Apache/Kafka\nredef Kafka::logs_to_send = set(HTTP::LOG, DNS::LOG);\nredef Kafka::topic_name = \"zeek\";\nredef Kafka::tag_json = T;\nredef Kafka::kafka_conf = table( [\"metadata.broker.list\"] = \"node1:6667\"\n                               , [\"security.protocol\"] = \"SASL_PLAINTEXT\"\n                               , [\"sasl.kerberos.keytab\"] = \"/etc/security/keytabs/metron.headless.keytab\"\n                               , [\"sasl.kerberos.principal\"] = \"metron@EXAMPLE.COM\"\n                               );\n```\n\n## Contributing\n\nIf you are interested in contributing to this plugin, please see the Apache Metron [CONTRIBUTING.md](https://github.com/apache/metron/blob/master/CONTRIBUTING.md).\n\n"}