{"description": "Discover successful ShellShock attacks.", "tags": "shellshock, detect, scripts", "version": "master", "depends": null, "test_cmd": "( cd tests && btest -d )", "build_cmd": null, "url": "https://github.com/corelight/bro-shellshock", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "ShellShock Detector for Bro\n===========================\n\nThis script detects successful exploitation of the Bash vulnerability\nwith CVE-2014-6271 nicknamed \"ShellShock\".  It's more comprehensive than\nmost of the detections around in that it's watching for behavior from \nthe attacked host that might indicate successful compromise or actual\nvulnerability.\n\nIf a host is seen receiving an attack over HTTP, Bro will watch for that\nhost to either download a dropper payload or send an ICMP ping.  Many\nmore mechanisms could show up, but this would cover most of the existing\nknown response mechanisms.  This script is configured by default to \nwatch for files of mime type application/x-executable which would cover\nthe dropper listed in the attack here:\n\n\thttps://gist.github.com/anonymous/929d622f3b36b00c0be1\n\nAlternately if attackers are just testing with a ping command, this script\nwill watch for a ping command from the victim shortly after an\nattack is detected.\n\nThis script will also add a tag to the \"tags\" field in the HTTP log for\nany requests that appear to be possible attacks.  The content of the \ntag is: ShellShock::HIT.\n\nFor what it's worth, this script is cluster-aware and should work on\nBro clusters just fine and should be ok to run operationally.\n\nSupport\n-------\n\nThis script currently supports Bro 2.3, 2.4, and 2.5.  Please file a ticket\nif this script is giving you trouble on any supported version of Bro.\n\nDemo\n----\n\nThis repository includes an example packet capture that exploits an \nexample server named exploit.pcap.  Here are the relevant logs that are output.\n\nnotice.log\n\n\t#separator \\x09\n\t#set_separator\t,\n\t#empty_field\t(empty)\n\t#unset_field\t-\n\t#path\tnotice\n\t#open\t2014-09-26-10-47-02\n\t#fields\tts\tuid\tid.orig_h\tid.orig_p\tid.resp_h\tid.resp_p\tfuid\tfile_mime_type\tfile_desc\tproto\tnote\tmsg\tsub\tsrc\tdst\tp\tpeer_descr\tactions\tsuppress_for\tdropped\tremote_location.country_code\tremote_location.region\tremote_location.city\tremote_location.latitude\tremote_location.longitude\n\t#types\ttime\tstring\taddr\tport\taddr\tport\tstring\tstring\tstring\tenum\tenum\tstring\tstring\taddr\taddr\tport\tcount\tstring\tset[enum]\tinterval\tbool\tstring\tstring\tstring\tdouble\tdouble\n\t1411666207.583791\t-\t-\t-\t-\t-\t-\t-\t-\t-\tShellShock::Scanner\t10.246.50.2 sent at least 1 CVE-2014-6271 exploit attempts in 0m0s.\tUsed payload: \"() { :;}; /bin/ping -c1 10.246.50.2\" :: against sample victim hosts: 10.246.50.6\t10.246.50.2\t-\t-\t-\tbro\tNotice::ACTION_LOG\t3600.00000-\n\t1411666207.588581\t-\t-\t-\t-\t-\t-\t-\t-\t-\tShellShock::Exploit\tHigh likelihood of successful CVE-2014-6271 exploitation against 10.246.50.6.  Attack over HTTP and sent a ping to 10.246.50.2 within 0.000 seconds of an attack.\tAttack over HTTP and sent a ping to 10.246.50.2 within 0.000 seconds of an attack.\t10.246.50.6\t-\t-\t-\tbro\tNotice::ACTION_LOG\t3600.000000\tF\t-\t-\t-\t-\t-\n\n\nhttp.log\n\n\t#separator \\x09\n\t#set_separator\t,\n\t#empty_field\t(empty)\n\t#unset_field\t-\n\t#path\thttp\n\t#open\t2014-09-26-10-47-02\n\t#fields\tts\tuid\tid.orig_h\tid.orig_p\tid.resp_h\tid.resp_p\ttrans_depth\tmethod\thost\turi\treferrer\tuser_agent\trequest_body_len\tresponse_body_len\tstatus_code\tstatus_msg\tinfo_code\tinfo_msg\tfilename\ttags\tusername\tpassword\tproxied\torig_fuids\torig_mime_types\tresp_fuids\tresp_mime_types\n\t#types\ttime\tstring\taddr\tport\taddr\tport\tcount\tstring\tstring\tstring\tstring\tstring\tcount\tcount\tcount\tstring\tcount\tstring\tstring\tset[enum]\tstring\tstring\tset[string]\tvector[string]\tvector[string]\tvector[string]\tvector[string]\n\t1411666207.583791\tCC7s232GDnmtxZUly5\t10.246.50.2\t43616\t10.246.50.6\t80\t1\tGET\t10.246.50.6\t/exploitable.cgi\t-\t() { :;}; /bin/ping -c1 10.246.50.2\t0\t615\t500\tInternal Server Error\t-\t-\t-\tShellShock::HIT\t-\t-\t-\t-\t-\tFgVgjb1GU12ixSuugc\ttext/html\n\t#close\t2014-09-26-10-47-02\n\n\nInstallation\n------------\n\n\tbro-pkg refresh\n\tbro-pkg install corelight/bro-shellshock\n\n\nConfiguration\n-------------\n\nThere are a couple of configuration variables.\n\n\t## The number of apparent attacks a host must send for it to be \n\t## detected as ShellShock::Scanner.\n\tconst ShellShock::scan_threshold = 10 &redef;\n\n\t## The period over which scanner detection is performed.\n\tconst ShellShock::scan_detection_period = 10min &redef;\n\nThese can be used to expand how long ShellShock scanned are watched for\nand the number of attacks that need to happen before they are declared\nto be scanning and have a notice created.\n\nAuthor\n------\n\n\tSeth Hall <seth@corelight.com>\n\nThanks\n------\n\n\tStephen Hosom   - Provided a fully exploiting packet capture.\n\tNick Weaver     - Valuable discussion on how shellshock is and isn't exploitable.\n\tVlad Grigorescu - Feature request after feature request.\n\tMike Patterson  - Suggesting to watch for shellscripts as a post-exploit dropper.\n"}