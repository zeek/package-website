{"description": "BACnet plugin for parsing and logging of the BACnet (building automation and control) protocol - CISA ICSNPP", "tags": "bacnet, BACnet, ics, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && btest -c btest.cfg", "build_cmd": "./configure && make", "url": "https://github.com/cisagov/icsnpp-bacnet", "summary": null, "script_dir": "build/scripts/icsnpp/bacnet", "plugin_dir": null, "readme": "# ICSNPP-BACnet\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - BACnet.\n\n## Overview\n\nICSNPP-BACnet is a Zeek plugin for parsing and logging fields within the BACnet protocol.\n\nThis plugin was developed to be fully customizable, so if you would like to drill down into specific BACnet packets and log certain variables, add the logging functionality to [scripts/icsnpp/bacnet/main.zeek](scripts/icsnpp/bacnet/main.zeek). The functions within [scripts/icsnpp/bacnet/main.zeek](scripts/icsnpp/bacnet/main.zeek) and [src/events.bif](src/events.bif) should prove to be a good guide on how to add new logging functionality.\n\nThis parser produces three log files. These log files are defined in [scripts/icsnpp/bacnet/main.zeek](scripts/icsnpp/bacnet/main.zeek).\n* bacnet.log\n* bacnet_discovery.log\n* bacnet_property.log\n\nFor additional information on these log files, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manger](https://docs.zeek.org/projects/package-manager/en/stable/index.html)\n\n```bash\nzkg refresh\nzkg install icsnpp-bacnet\n```\n\nIf this package is installed from ZKG it will be added to the available plugins. This can be tested by running `zeek -N`. If installed correctly you will see `ICSNPP::BACnet`.\n\nIf you have ZKG configured to load packages (see @load packages in quickstart guide), this plugin and scripts will automatically be loaded and ready to go.\n[ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add `icsnpp/bacnet` to your command to run this plugin's scripts on the packet capture:\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-bacnet.git\nzeek -Cr icsnpp-bacnet/tests/traces/bacnet_example.pcap icsnpp/bacnet\n```\n\n### Manual Install\n\nTo install this package manually, clone this repository and run the configure and make commands as shown below.\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-bacnet.git\ncd icsnpp-bacnet/\n./configure\nmake\n```\n\nIf these commands succeed, you will end up with a newly create build directory. This contains all the files needed to run/test this plugin. The easiest way to test the parser is to point the ZEEK_PLUGIN_PATH environment variable to this build directory.\n\n```bash\nexport ZEEK_PLUGIN_PATH=$PWD/build/\nzeek -N # Ensure everything compiled correctly and you are able to see ICSNPP::BACnet\n```\n\nOnce you have tested the functionality locally and it appears to have compiled correctly, you can install it system-wide:\n```bash\nsudo make install\nunset ZEEK_PLUGIN_PATH\nzeek -N # Ensure everything installed correctly and you are able to see ICSNPP::BACnet\n```\n\nTo run this plugin in a site deployment you will need to add the line `@load icsnpp/bacnet` to your `site/local.zeek` file in order to load this plugin's scripts.\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add `icsnpp/bacnet` to your command to run this plugin's scripts on the packet capture:\n\n```bash\nzeek -Cr icsnpp-bacnet/tests/traces/bacnet_example.pcap icsnpp/bacnet\n```\n\nIf you want to deploy this on an already existing Zeek implementation and you don't want to build the plugin on the machine, you can extract the ICSNPP_Bacnet.tgz file to the directory of the established ZEEK_PLUGIN_PATH (default is `${ZEEK_INSTALLATION_DIR}/lib/zeek/plugins/`).\n\n```bash\ntar xvzf build/ICSNPP_Bacnet.tgz -C $ZEEK_PLUGIN_PATH \n```\n\n## Logging Capabilities\n\n### BACnet Header Log (bacnet.log)\n\n#### Overview\n\nThis log captures BACnet header information for every BACnet/IP packet and logs it to **bacnet.log**.\n\n#### Fields Captured\n\n| Field         | Type      | Description                                               |\n| ------------- |-----------|-----------------------------------------------------------| \n| ts            | time      | Timestamp                                                 |\n| uid           | string    | Unique ID for this connection                             |\n| id            | conn_id   | Default Zeek connection info (IP addresses, ports)        |\n| is_orig       | bool      | True if the packet is sent from the originator            |\n| bvlc_function | string    | BVLC function                                             |\n| pdu_type      | string    | APDU service type                                         |\n| pdu_service   | string    | APDU service choice                                       |\n| invoke_id     | count     | Unique ID for all outstanding confirmed request/ACK APDUs |\n| result_code   | string    | Error code or reject/abort reason                         |\n\n### Discovery Log (bacnet_discovery.log)\n\n#### Overview\n\nThis log captures important fields for Who-Is, I-Am, Who-Has, and I-Have messages and logs them to **bacnet_discovery.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                                     |\n| ----------------- |-----------|-----------------------------------------------------------------|\n| ts                | time      | Timestamp                                                       |\n| uid               | string    | Unique ID for this connection                                   |\n| id                | conn_id   | Default Zeek connection info (IP addresses, ports)              |\n| is_orig           | bool      | True if the message is sent from the originator                 |\n| pdu_service       | string    | APDU service choice (who-is, i-am, who-has, or i-have)          |\n| object_type       | string    | BACnet device's object type                                     |\n| instance_number   | count     | BACnet device's instance number                                 |\n| vendor            | string    | BACnet device's vendor name                                     |\n| range             | string    | Range of instance numbers                                       |\n| object_name       | string    | Object name searching for (who-has) or responding with (i-have) |\n\n### Property Log (bacnet_property.log)\n\n#### Overview\n\nThis log captures important variables for Read-Property-Request, Read-Property-ACK, and Write-Property-Request messages and logs them to **bacnet_property.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|---------------------------------------------------------- |\n| ts                | time      | Timestamp                                                 |\n| uid               | string    | Unique ID for this connection                             |\n| id                | conn_id   | Default Zeek connection info (IP addresses, ports)        |\n| is_orig           | bool      | True if the message is sent from the originator           |\n| pdu_service       | string    | APDU service choice (read or write property services)     |\n| object_type       | string    | BACnet device's object type                               |\n| instance_number   | count     | BACnet device's instance number                           |\n| property          | string    | Property type                                             |\n| array_index       | count     | Property array index                                      |\n| value             | string    | Value of property                                         |\n\n## BACnet File Extraction\n\nBACnet contains two messages for sending and receiving files: Atomic-Read-File and Atomic-Write-File. This plugin will extract files sent via these two messages and pass the extracted files to Zeek's file analysis framework.\n\n## Troubleshooting\n\nBy default, this BACnet parser will only produce BACnet log files on BACnet traffic to UDP port 47808. If you have BACnet traffic operating on a port other than UDP/47808, you can remove the `#` in the first line of [scripts/icsnpp/bacnet/\\_\\_load\\_\\_.zeek](scripts/icsnpp/bacnet/__load__.zeek). However, this may produce false positives as other UDP traffic such as DNS can produce similar packets to some of the simpler/smaller BACnet functions.\n\nDefault configuration, only parses BACnet traffic on UDP/47808\n```bash\n# @load-sigs ./dpd.sig\n@load ./main\n```\n\nModified configuration, parses BACnet traffic on all UDP ports, but may produce false positives\n```bash\n@load-sigs ./dpd.sig\n@load ./main\n```\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/icsnpp-bsap)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### Other Software\nIdaho National Laboratory is a cutting edge research facility which is a constantly producing high quality research and software. Feel free to take a look at our other software and scientific offerings at:\n\n[Primary Technology Offerings Page](https://www.inl.gov/inl-initiatives/technology-deployment)\n\n[Supported Open Source Software](https://github.com/idaholab)\n\n[Raw Experiment Open Source Software](https://github.com/IdahoLabResearch)\n\n[Unsupported Open Source Software](https://github.com/IdahoLabCuttingBoard)\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC\n\nLicensed under the 3-Part BSD (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  https://opensource.org/licenses/BSD-3-Clause\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\nLicensing\n-----\nThis software is licensed under the terms you may find in the file named \"LICENSE\" in this directory.\n"}