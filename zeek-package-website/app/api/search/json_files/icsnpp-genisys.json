{"description": "Genisys is a protocol defined by Union Switch & Signal for communicating with", "tags": "genisys, railway, SCADA, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && PATH=$(zkg config plugin_dir)/packages/spicy-plugin/bin:$PATH btest -d -j $(nproc)", "build_cmd": "mkdir -p build && cd build && SPICYZ=$(command -v spicyz || echo %(package_base)s/spicy-plugin/build/bin/spicyz) cmake .. && cmake --build .", "url": "https://github.com/cisagov/icsnpp-genisys", "summary": "Genisys is a protocol defined by Union Switch & Signal for communicating with SCADA field devices, commonly used in the railway industry.", "script_dir": "analyzer", "plugin_dir": "build/spicy-modules", "readme": "# ICSNPP-Genisys\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - Genisys over TCP/IP.\n\n## Overview\n\nICSNPP-Genisys is a Zeek plugin (written in [Spicy](https://docs.zeek.org/projects/spicy/en/latest/)) for parsing and logging fields used by the Genisys protocol. Genisys is a protocol created by [Union Switch & Signal](https://en.wikipedia.org/wiki/Union_Switch_%26_Signal). It is used to communicate with SCADA field devices and is commonly used in the rail industry. Genisys was originally intended for use over serial connections, but today it is often transported over TCP port 10001 (although that port number has not been IANA-assigned). Genisys employs a client-server communication scheme (similar to Modbus) in which one server communicates with one or more client devices (each identified by a single byte address) over the same connection.\n\nThe parsing logic of this plugin was developed by reverse-engineering a sample PCAP containing Genisys traffic as well as by referencing the comments of a years-old [dissector patch](https://gitlab.com/wireshark/wireshark/-/issues/3422) for Wireshark that was proposed but never accepted.\n\nThis parser produces one log file, `genisys.log`, defined in [analyzer/main.zeek](analyzer/main.zeek).\n\nFor additional information on this log file, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manager](https://docs.zeek.org/projects/package-manager/en/stable/index.html). It requires [Spicy](https://docs.zeek.org/projects/spicy/en/latest/) and the [Zeek Spicy plugin](https://docs.zeek.org/projects/spicy/en/latest/zeek.html).\n\n```bash\n$ zkg refresh\n$ zkg install icsnpp-genisys\n```\n\nIf this package is installed from ZKG it will be added to the available plugins. This can be tested by running `zeek -NN`. If installed correctly you will see `ANALYZER_SPICY_GENISYS_TCP` under the list of `_Zeek::Spicy` analyzers.\n\nIf you have ZKG configured to load packages (see `@load packages` in the [ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)), this plugin and scripts will automatically be loaded and ready to go.\n\n## Logging Capabilities\n\n### Genisys Log (genisys.log)\n\n#### Overview\n\nThis log captures and logs each Genisys message transmitted over TCP port 10001 to `genisys.log`. The port can be overriden by redefining the `genisys_ports_tcp` variable, e.g.:\n\n```\n$ zeek -C -r genisys.pcap local \"GENISYS::genisys_ports_tcp={ 10002/tcp }\"\n```\n\n#### Fields Captured\n\n| Field             | Type           | Description                                               |\n| ----------------- |----------------|-----------------------------------------------------------| \n| ts                | time           | Timestamp                                                 |\n| uid               | string         | Unique ID for this connection                             |\n| id                | conn_id        | Default Zeek connection info (IP addresses, ports)        |\n| proto             | string         | Transport protocol                                        |\n| header            | string         | Message type                                              |\n| server            | count          | Server ID                                                 |\n| direction         | string         | `request` or `response`                                   |\n| crc_transmitted   | string         | Hex representation of CRC-16 value transmitted in payload |\n| crc_calculated    | string         | Hex representation of CRC-16 value calculated when parsed |\n| payload           | vector<string> | Vector of `address=data` pairs from message payload       |\n\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/ICSNPP-Genisys)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC. Released under the terms of the 3-Clause BSD License (see [`LICENSE.txt`](./LICENSE.txt)).\n"}