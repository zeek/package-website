{"description": "This script enables easy customation of how notice actions are handled.  It's built to work with eZeekConfigurator, but that isn't required.", "tags": "notice, configuration, ezeekonfigurator, ezk", "version": "master", "depends": ["zeek >=3.0.0-rc1"], "test_cmd": "cd tests && btest -d notice_tests", "build_cmd": null, "url": "https://github.com/dopheide-esnet/zeek-notice-config", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "zeek-notice-config\n==================\n\nThis script enables easy customation of how notice actions are handled.\nIt's built to work with eZeekConfigurator, but that isn't required and can\nbe configured with a normal script.\n\nActions\n-------\nNotices can be configured with five different \"actions\", some of which\ncorrespond to Zeek internal Notice::ACTION types.\n\n\tLOG - (default) Sets Notice::ACTION_LOG which logs to notice.log\n\tIGNORE - Ignores the notice and won't even log it.\n\tALARM -Sets Notice::ACTION_ALARM which logs to notice-alarm.log\n\tPAGE - Sets Notice::ACTION_PAGE which you can handle how you see fit \n\tBHR - Sets Notice::ACTION_BHR (not built in) which you can handle later.\n\t      This will only be set if Notice::ACTION_BHR has been previously defined.\n\nNote, the current commonly used BHR scripts also set ACTION_BHR, but do not\nprocess a black hole route based on that action existing.\n\nThere are no plans to support ACTION_EMAIL because we believe email is a\nhorrible way to alert enginners to a problem.\n\nEach notice configuration element is built from an NC_Info record consisting\nof up to four pieces of information:\n\n\t$src:  A set of source subnets that will be matched against the notice src.\n\t$src_in: A set of strings containing variable names whose contents  will be\n\tmatched against the notice src.  For instance, you can match\n\tagainst \"Site::local_nets\" without having the duplicate the source\n\tnets.\n\t$note: A set of Notice::Types to match against.\n\t$action: A set of the above available notice-config actions\n\nThe notice_cfg itself is a vector of NC_Info.  This means it is ordered and\nthe first match will be processed for each notice.\n\nAn example configuration that will whitelist scan notices for local_nets\nand then BHR the rest:\n\n\tmodule Notice;\n\tnotice_cfg += NC_Info($src_in=set(\"Site::local_nets\"),\n\t\t\t      $note=set(Scan::Address_Scan),\n\t\t\t      $action=set(IGNORE));\n\tnotice_cfg += NC_Info($note=set(Scan::Address_Scan),\n\t\t\t      $action=set(LOG,BHR));\n\nSince all of the items in NC_Info are sets, we can do the same thing with port\nscans by modifying those same lines and not having to duplicate everything:\n\n\tmodule Notice;\n\tnotice_cfg += NC_Info($src_in=set(\"Site::local_nets\"),\n\t                      $note=set(Scan::Address_Scan, Scan::Port_Scan),\n\t                      $action=set(IGNORE));\n\tnotice_cfg += NC_Info($note=set(Scan::Address_Scan, Scan::Port_Scan),\n\t                      $action=set(LOG,BHR));\n\nIf you also want to perform specific actions based on the Notice actions\nyou've set, a custom script can be written to handle those.  For example,\nhere is a skeleton for handling Notice::ACTION_PAGE:\n\n\tmodule Notice;\n\texport {\n        \t## Timeout for when() call when paging\n        \toption page_timeout: interval=3 sec;\n\t}\n\t\n\thook Notice::policy(n: Notice::Info) &priority=5 {\n\t\tif(Notice::ACTION_PAGE in n$actions){\n\t\t\twhen ( local result = Exec::run([$cmd=SOME_COMMAND])){\n\t\t\t\tprint fmt(\"%s\",result$stdout[0]);\n\t\t\t}timeout page_timeout{\n\t\t\t\tprint(fmt(\"Couldn't page for some reason. %s\",alert_type));\n\t\t\t}\n\t\t}\n\t}\n\n\n\n"}