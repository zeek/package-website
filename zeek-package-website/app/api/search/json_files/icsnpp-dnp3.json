{"description": "DNP3 script for detailed logging of the DNP3 protocol - CISA ICSNPP", "tags": "dnp3, DNP3, ics, ICS, CISA, INL, ICSNPP, icsnpp, zeek scripting, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && btest -c btest.cfg", "build_cmd": null, "url": "https://github.com/cisagov/icsnpp-dnp3", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "# ICSNPP-DNP3\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - DNP3.\n\n## Overview\n\nICSNPP-DNP3 is a Zeek package that extends the logging capabilities of Zeek's default DNP3 protocol parser.\n\nZeek's default DNP3 parser logs DNP3 traffic to dnp3.log. This log file remains unchanged. This package extends DNP3 logging capability by adding two new DNP3 log files:\n* dnp3_control.log\n* dnp3_objects.log\n\nFor additional information on these log files, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manger](https://docs.zeek.org/projects/package-manager/en/stable/index.html)\n\n```bash\nzkg refresh\nzkg install icsnpp-dnp3\n```\n\nIf ZKG is configured to load packages (see @load packages in quickstart guide), this script will automatically be loaded and ready to go.\n[ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\n\nIf users are not using site/local.zeek or another site installation of Zeek and want to run this script on a packet capture, they can add `icsnpp-dnp3` to the command to run this script on the packet capture:\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-dnp3.git\nzeek -Cr icsnpp-dnp3/tests/traces/dnp3_example.pcap icsnpp-dnp3\n```\n\n### Manual Install\n\nTo install this script manually, clone this repository and copy the contents of the scripts directory into `${ZEEK_INSTALLATION_DIR}/share/zeek/site/icsnpp-dnp3`.\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-dnp3.git\nzeek_install_dir=$(dirname $(dirname `which zeek`))\ncp -r icsnpp-dnp3/scripts/ $zeek_install_dir/share/zeek/site/icsnpp-dnp3\n```\n\nIf using a site deployment, simply add echo `@load icsnpp-dnp3` to the local.site file.\n\nIf users are not using site/local.zeek or another site installation of Zeek, and want to run this package on a packet capture, they can add `icsnpp-dnp3` to the command to run this plugin's scripts on the packet capture:\n\n```bash\nzeek -Cr icsnpp-dnp3/tests/traces/dnp3_example.pcap icsnpp-dnp3\n```\n## Logging Capabilities\n\n### DNP3 Control Log (dnp3_control.log)\n\n#### Overview\n\nThis log captures DNP3 Control Relay Output Block and Pattern Control Block data seen in SELECT-OPERATE-RESPONSE commands and logs them to **dnp3_control.log**.\n\nDNP3 Control Relay Output Blocks can be controlled via DNP3 SELECT and OPERATE commands and are among the most common (and most impactful) DNP3 commands.\n\nThis log file contains all the relevant data for these SELECT and OPERATE commands (as well as the responses), it shows a more in-depth look at these commands, and it provides a much more detailed look at what operational DNP3 commands are being sent.\n\n#### Fields Captured:\n\n| Field                 | Type      | Description                                                   |\n| --------------------- |-----------|---------------------------------------------------------------|\n| ts                    | time      | Timestamp                                                     |\n| uid                   | string    | Unique ID for this connection                                 |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig               | bool      | True if the packet is sent from the originator                |\n| source_h              | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p              | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h         | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p         | port      | Destination port (see *Source and Destination Fields*)        |\n| block_type            | string    | Control_Relay_Output_Block or Pattern_Control_Block           |\n| function_code         | string    | Function code (SELECT, OPERATE, RESPONSE)                     |\n| index_number          | count     | Object index number                                           |\n| trip_control_code     | string    | Nul, Close, or Trip                                           |\n| operation_type        | string    | Nul, Pulse_On, Pulse_Off, Latch_On, Latch_Off                 |\n| execute_count         | count     | Number of times to execute                                    |\n| on_time               | count     | On time                                                       |\n| off_time              | count     | Off time                                                      |\n| status_code           | string    | Status code                                                   |\n\n### DNP3 Read Object Log (dnp3_read_objects.log)\n\n#### Overview\n\nThis log captures DNP3 Read Object data seen in READ-RESPONSE commands and logs them to **dnp3_objects.log**.\n\nDNP3 READ-RESPONSE commands are very common DNP3 commands and these responses contain a lot of useful information about the DNP3 devices.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                                   |\n| --------------------- |-----------|---------------------------------------------------------------|\n| ts                    | time      | Timestamp                                                     |\n| uid                   | string    | Unique ID for this connection                                 |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)            |\n| is_orig               | bool      | True if the packet is sent from the originator                |\n| source_h              | address   | Source IP address (see *Source and Destination Fields*)       |\n| source_p              | port      | Source port (see *Source and Destination Fields*)             |\n| destination_h         | address   | Destination IP address (see *Source and Destination Fields*)  |\n| destination_p         | port      | Destination port (see *Source and Destination Fields*)        |\n| function_code         | string    | Function code (READ or RESPONSE)                              |\n| object_type           | string    | DNP3 object type                                              |\n| object_count          | count     | Number of objects                                             |\n| range_low             | count     | Range (low) of object                                         |\n| range_high            | count     | Range (high) of object                                        |\n\n### Source and Destination Fields\n\n#### Overview\n\nZeek's typical behavior is to focus on and log packets from the originator and not log packets from the responder. However, most ICS protocols contain useful information in the responses, so the ICSNPP parsers log both originator and responses packets. Zeek's default behavior, defined in its `id` struct, is to never switch these originator/responder roles which leads to inconsistencies and inaccuracies when looking at ICS traffic that logs responses.\n\nThe default Zeek `id` struct contains the following logged fields:\n* id.orig_h (Original Originator/Source Host)\n* id.orig_p (Original Originator/Source Port)\n* id.resp_h (Original Responder/Destination Host)\n* id.resp_p (Original Responder/Destination Port)\n\nAdditionally, the `is_orig` field is a boolean field that is set to T (True) when the id_orig fields are the true originators/source and F (False) when the id_resp fields are the true originators/source.\n\nTo not break existing platforms that utilize the default `id` struct and `is_orig` field functionality, the ICSNPP team has added four new fields to each log file instead of changing Zeek's default behavior. These four new fields provide the accurate information regarding source and destination IP addresses and ports:\n* source_h (True Originator/Source Host)\n* source_p (True Originator/Source Port)\n* destination_h (True Responder/Destination Host)\n* destination_p (True Responder/Destination Port)\n\nThe pseudocode below shows the relationship between the `id` struct, `is_orig` field, and the new `source` and `destination` fields.\n\n```\nif is_orig == True\n    source_h == id.orig_h\n    source_p == id.orig_p\n    destination_h == id.resp_h\n    destination_p == id.resp_p\nif is_orig == False\n    source_h == id.resp_h\n    source_p == id.resp_p\n    destination_h == id.orig_h\n    destination_p == id.orig_p\n```\n\n#### Example\n\nThe table below shows an example of these fields in the log files. The first log in the table represents a Modbus request from 192.168.1.10 -> 192.168.1.200 and the second log represents a Modbus reply from 192.168.1.200 -> 192.168.1.10. As shown in the table below, the `id` structure lists both packets as having the same originator and responder, but the `source` and `destination` fields reflect the true source and destination of these packets.\n\n| id.orig_h    | id.orig_p | id.resp_h     | id.resp_p | is_orig | source_h      | source_p | destination_h | destination_p |\n| ------------ | --------- |---------------|-----------|---------|---------------|----------|---------------|-------------- |\n| 192.168.1.10 | 47785     | 192.168.1.200 | 502       | T       | 192.168.1.10  | 47785    | 192.168.1.200 | 502           |\n| 192.168.1.10 | 47785     | 192.168.1.200 | 502       | F       | 192.168.1.200 | 502      | 192.168.1.10  | 47785         |\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/icsnpp-bsap)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC. Released under the terms of the 3-Clause BSD License (see [`LICENSE.txt`](./LICENSE.txt)).\n"}