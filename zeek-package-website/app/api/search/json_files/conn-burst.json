{"description": "Identify bursty connections (large and fast)", "tags": "conn, burst", "version": "master", "depends": null, "test_cmd": null, "build_cmd": null, "url": "https://github.com/corelight/conn-burst", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "Connection Burst Identification\n-------------------------------\n\nThis package identifies \"bursting connections\" which are considered to be \nconnections which transfer a large amount of data quickly.  Once a bursty \nconnection is identified it is no longer watched for being bursty.\n\nWhen a bursty connection is identified, the event `ConnBurst::detected` is \ngenerated and a log is written to a log stream named `conn_burst`.\n\nInstallation\n------------\n\n\tbro-pkg refresh\n\tbro-pkg install bro/corelight/conn-burst\n\n\nConfiguration\n-------------\n\nThere are a couple of configuration options that might have an impact on\nanalysis and detection.\n\n`ConnBurst::speed_threshold` - This is a `double` value defined in Mbps and \nit means that you consider a bursty connection on your network to be one \nthat is transferring data faster than this rate. The default speed threshold\nis `50Mbps`.\n\n`ConnBurst::size_threshold` - This is a `double` value defined in MB and it \nmeans that you'd like a minimum of this much traffic transferred before the \ntransfer rate of the connection is tested.  This avoids identifying a small\nconnection that happens to tranfer data quickly as bursty since it's likely \nthat a small and fast connection doesn't really matter that much to your \nanalysis. The default size threshold is `100MB`.\n\nUsage\n-----\n\nWhen a connection burst is detected, it will generate the following event.\nYou can copy and paste this into your script if you want to do something\nbased on a connection bursting.\n\n```bro\nevent ConnBurst::detected(c: connection, rate_in_mbps: double)\n\t{\n\t# Do something here!\n\t}\n```\n\nAcknowledgements\n----------------\n\nThanks to Robin Sommer for the initial discussion on how to approach this \nproblem efficiently.  Also, thanks to Aashish Sharma and Keith Lehigh for\nprerelease testing and fixing a few bugs!\n\nAuthors\n-------\n\n - Seth Hall <seth@corelight.com>\n"}