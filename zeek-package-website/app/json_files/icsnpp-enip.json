{"description": "Ethernet/IP and CIP plugin for parsing and logging of the Ethernet/IP and CIP protocols - CISA ICSNPP", "tags": "enip, ENIP, cip, CIP, ics, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && btest -c btest.cfg", "build_cmd": "./configure && make", "url": "https://github.com/cisagov/icsnpp-enip", "summary": null, "script_dir": "build/scripts/icsnpp/enip", "plugin_dir": null, "readme": "# ICSNPP-ENIP\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - Ethernet/IP and CIP.\n\n## Overview\n\nICSNPP-ENIP is a Zeek plugin for parsing and logging fields within the Ethernet/IP protocol.\n\nThis plugin was developed to be fully customizable, so if you would like to drill down into specific ENIP/CIP packets and log certain variables, add the logging functionality to [scripts/icsnpp/enip/main.zeek](scripts/icsnpp/enip/main.zeek). The functions within [scripts/icsnpp/enip/main.zeek](scripts/icsnpp/enip/main.zeek) and [src/events.bif](src/events.bif) should prove to be a good guide on how to add new logging functionality.\n\nThis parser produces four log files. These log files are defined in [scripts/icsnpp/enip/main.zeek](scripts/icsnpp/enip/main.zeek).\n* enip.log\n* cip.log\n* cip_io.log\n* cip_identity.log\n\nFor additional information on these log files, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manger](https://docs.zeek.org/projects/package-manager/en/stable/index.html)\n\n```bash\nzkg refresh\nzkg install icsnpp-enip\n```\n\nIf this package is installed from ZKG it will be added to the available plugins. This can be tested by running `zeek -N`. If installed correctly you will see `ICSNPP::ENIP`.\n\nIf you have ZKG configured to load packages (see @load packages in quickstart guide), this plugin and scripts will automatically be loaded and ready to go.\n[ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add `icsnpp/enip` to your command to run this plugin's scripts on the packet capture:\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-enip.git\nzeek -Cr icsnpp-enip/tests/traces/enip_cip_example.pcap icsnpp/enip\n```\n\n### Manual Install\n\nTo install this package manually, clone this repository and run the configure and make commands as shown below.\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-enip.git\ncd icsnpp-enip/\n./configure\nmake\n```\n\nIf these commands succeed, you will end up with a newly create build directory. This contains all the files needed to run/test this plugin. The easiest way to test the parser is to point the ZEEK_PLUGIN_PATH environment variable to this build directory.\n\n```bash\nexport ZEEK_PLUGIN_PATH=$PWD/build/\nzeek -N # Ensure everything compiled correctly and you are able to see ICSNPP::ENIP\n```\n\nOnce you have tested the functionality locally and it appears to have compiled correctly, you can install it system-wide:\n```bash\nsudo make install\nunset ZEEK_PLUGIN_PATH\nzeek -N # Ensure everything installed correctly and you are able to see ICSNPP::ENIP\n```\n\nTo run this plugin in a site deployment you will need to add the line `@load icsnpp/enip` to your `site/local.zeek` file in order to load this plugin's scripts.\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add `icsnpp/enip` to your command to run this plugin's scripts on the packet capture:\n\n```bash\nzeek -Cr icsnpp-enip/tests/traces/enip_cip_example.pcap icsnpp/enip\n```\n\nIf you want to deploy this on an already existing Zeek implementation and you don't want to build the plugin on the machine, you can extract the Zeek_Enip.tgz file to the directory of the established ZEEK_PLUGIN_PATH (default is `${ZEEK_INSTALLATION_DIR}/lib/zeek/plugins/`).\n\n```bash\ntar xvzf build/Zeek_Enip.tgz -C $ZEEK_PLUGIN_PATH \n```\n\n## Logging Capabilities\n\n### ENIP Header Log (enip.log)\n\n#### Overview\n\nThis log captures Ethernet/IP header information for every Ethernet/IP packet and logs it to **enip.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| uid               | string    | Unique ID for this connection                             |\n| id                | conn_id   | Default Zeek connection info (IP addresses, ports)        |\n| is_orig           | bool      | True if the packet is sent from the originator            |\n| enip_command_code | string    | Ethernet/IP command code                                  |\n| enip_command      | string    | Ethernet/IP command name                                  |\n| length            | count     | Length of ENIP data following header                      |\n| session_handle    | string    | Session identifier                                        |\n| enip_status       | string    | Ethernet/IP status code                                   |\n| sender_context    | string    | Sender context                                            |\n| options           | string    | Options flags                                             |\n\n### CIP Header Log (cip.log)\n\n#### Overview\n\nThis log captures CIP header information for every CIP packet and logs it to **cip.log**.\n\n#### Fields Captured\n\n| Field                     | Type      | Description                                               |\n| ------------------------- |-----------|-----------------------------------------------------------|\n| ts                        | time      | Timestamp                                                 |\n| uid                       | string    | Unique ID for this connection                             |\n| id                        | conn_id   | Default Zeek connection info (IP addresses, ports)        |\n| is_orig                   | bool      | True if the packet is sent from the originator            |\n| cip_sequence_count        | count     | CIP sequence number                                       |\n| direction                 | string    | Request or response                                       |\n| cip_service_code          | string    | CIP service code                                          |\n| cip_service               | string    | CIP service name                                          |\n| cip_status_code           | string    | CIP status code                                           |\n| cip_status                | string    | CIP status name                                           |\n| cip_extended_status_code  | string    | CIP extended status code                                  |\n| cip_extended_status       | string    | CIP extended status name                                  |\n| class_id                  | string    | CIP request path - class ID                               |\n| class_name                | string    | CIP request path - class name                             |\n| instance_id               | string    | CIP request path - instance ID                            |\n| attribute_id              | string    | CIP request path - attribute ID                           |\n\n### CIP I/O Log (cip_io.log)\n\n#### Overview\n\nThis log captures CIP I/O (input-output) data for every CIP IO packet and logs it to **cip_io.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                               |\n| --------------------- |-----------|-----------------------------------------------------------|\n| ts                    | time      | Timestamp                                                 |\n| uid                   | string    | Unique ID for this connection                             |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)        |\n| is_orig               | bool      | True if the packet is sent from the originator            |\n| connection_id         | string    | Connection identifier                                     |\n| sequence_number       | count     | Sequence number within connection                         |\n| data_length           | count     | Length of data in io_data field                           |\n| io_data               | string    | CIP IO data (in hex)                                      |\n\n### CIP Identity Log (cip_identity.log)\n\n#### Overview\n\nThis log captures important variables for CIP_Identity objects and logs them to **cip_identity.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                           |\n| --------------------- |-----------|-------------------------------------------------------|\n| ts                    | time      | Timestamp                                             |\n| uid                   | string    | Unique ID for this connection                         |\n| id                    | conn_id   | Default Zeek connection info (IP addresses, ports)    |\n| encapsulation_version | count     | Encapsulation protocol version supported              |\n| socket_address        | addr      | Socket address IP address                             |\n| socket_port           | count     | Socket address port number                            |\n| vendor_id             | count     | Vendor ID                                             |\n| vendor_name           | string    | Name of vendor                                        |\n| device_type_id        | count     | Device type ID                                        |\n| device_type_name      | string    | Name of device type                                   |\n| product_code          | count     | Product code assigned to device                       |\n| revision              | string    | Device revision (major.minor)                         |\n| device_status         | string    | Current status of device                              |\n| serial_number         | string    | Serial number of device                               |\n| product_name          | string    | Human readable description of device                  |\n| device_state          | string    | Current state of the device                           |\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/icsnpp-bsap)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### Other Software\nIdaho National Laboratory is a cutting edge research facility which is a constantly producing high quality research and software. Feel free to take a look at our other software and scientific offerings at:\n\n[Primary Technology Offerings Page](https://www.inl.gov/inl-initiatives/technology-deployment)\n\n[Supported Open Source Software](https://github.com/idaholab)\n\n[Raw Experiment Open Source Software](https://github.com/IdahoLabResearch)\n\n[Unsupported Open Source Software](https://github.com/IdahoLabCuttingBoard)\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC\n\nLicensed under the 3-Part BSD (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  https://opensource.org/licenses/BSD-3-Clause\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\nLicensing\n-----\nThis software is licensed under the terms you may find in the file named \"LICENSE\" in this directory.\n"}