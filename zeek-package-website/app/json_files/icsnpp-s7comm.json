{"description": "S7Comm & S7Comm Plus plugin for parsing and logging of the S7Comm, S7Comm Plus and COTP protocols - CISA ICSNPP", "tags": "s7comm, s7comm-plus, s7plus, S7comm, S7Comm, S7CommPlus, Siemens, siemens, s7, S7, cotp, COTP, iso_cotp, ISO_COTP, ics, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, protocol analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && btest -c btest.cfg", "build_cmd": "./configure && make", "url": "https://github.com/cisagov/icsnpp-s7comm", "summary": null, "script_dir": "build/scripts/icsnpp/s7comm", "plugin_dir": null, "readme": "# ICSNPP-S7COMM\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - s7comm, s7comm-plus, and COTP.\n\n## Overview\n\nICSNPP-S7COMM is a Zeek plugin for parsing and logging fields within the s7comm, s7comm-plus, and COTP protocols.\n\nThis plugin was developed to be fully customizable, so if you would like to drill down into specific packets and log certain variables, add the logging functionality to [scripts/icsnpp/s7comm/main.zeek](scripts/icsnpp/s7comm/main.zeek). The functions within [scripts/icsnpp/s7comm/main.zeek](scripts/icsnpp/s7comm/main.zeek) and [src/events.bif](src/events.bif) should prove to be a good guide on how to add new logging functionality.\n\nThis parser currently produces five log files. These log files are defined in [scripts/icsnpp/s7comm/main.zeek](scripts/icsnpp/s7comm/main.zeek).\n* cotp.log\n* s7comm.log\n* s7comm_read_szl.log\n* s7comm_upload_download.log\n* s7comm_plus.log\n\nFor additional information on these log files, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manger](https://docs.zeek.org/projects/package-manager/en/stable/index.html)\n\n```bash\nzkg refresh\nzkg install icsnpp-s7comm\n```\n\nIf this package is installed from ZKG it will be added to the available plugins. This can be tested by running `zeek -N`. If installed correctly you will see `ICSNPP::S7COMM`.\n\nIf you have ZKG configured to load packages (see @load packages in quickstart guide), this plugin and scripts will automatically be loaded and ready to go.\n[ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add `icsnpp/s7comm` to your command to run this plugin's scripts on the packet capture:\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-s7comm.git\nzeek -Cr icsnpp-s7comm/tests/traces/s7comm_plus_example.pcap icsnpp/s7comm\n```\n\n### Manual Install\n\nTo install this package manually, clone this repository and run the configure and make commands as shown below.\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-s7comm.git\ncd icsnpp-s7comm/\n./configure\nmake\n```\n\nIf these commands succeed, you will end up with a newly create build directory. This contains all the files needed to run/test this plugin. The easiest way to test the parser is to point the ZEEK_PLUGIN_PATH environment variable to this build directory.\n\n```bash\nexport ZEEK_PLUGIN_PATH=$PWD/build/\nzeek -N # Ensure everything compiled correctly and you are able to see ICSNPP::S7COMM\n```\n\nOnce you have tested the functionality locally and it appears to have compiled correctly, you can install it system-wide:\n```bash\nsudo make install\nunset ZEEK_PLUGIN_PATH\nzeek -N # Ensure everything installed correctly and you are able to see ICSNPP::S7COMM\n```\n\nTo run this plugin in a site deployment you will need to add the line `@load icsnpp/s7comm` to your `site/local.zeek` file in order to load this plugin's scripts.\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add `icsnpp/s7comm` to your command to run this plugin's scripts on the packet capture:\n\n```bash\nzeek -Cr icsnpp-s7comm/tests/traces/s7comm_plus_example.pcap icsnpp/s7comm\n```\n\nIf you want to deploy this on an already existing Zeek implementation and you don't want to build the plugin on the machine, you can extract the ICSNPP_S7comm.tgz file to the directory of the established ZEEK_PLUGIN_PATH (default is `${ZEEK_INSTALLATION_DIR}/lib/zeek/plugins/`).\n\n```bash\ntar xvzf build/ICSNPP_S7comm.tgz -C $ZEEK_PLUGIN_PATH \n```\n\n## Logging Capabilities\n\n### COTP Log (cotp.log)\n\n#### Overview\n\nThis log captures COTP information for every COTP packet and logs it to **cotp.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| uid               | string    | Unique ID for this Connection                             |\n| id                | conn_id   | Default Zeek Connection Info (IP addresses, ports)        |\n| is_orig           | bool      | True if the packet is sent from the originator            |\n| pdu_code          | string    | COTP PDU Type Code (in hex)                               |\n| pdu_name          | string    | COTP PDU Name                                             |\n\n### S7COMM Header Log (s7comm.log)\n\n#### Overview\n\nThis log captures s7comm header information for every s7comm packet and logs it to **s7comm.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                               |\n| --------------------- |-----------|-----------------------------------------------------------|\n| ts                    | time      | Timestamp                                                 |\n| uid                   | string    | Unique ID for this Connection                             |\n| id                    | conn_id   | Default Zeek Connection Info (IP addresses, ports)        |\n| is_orig               | bool      | True if the packet is sent from the originator            |\n| rosctr_code           | count     | Remote Operating Service Control Code (in hex)            |\n| rosctr_name           | string    | Remote Operating Service Control Name                     |\n| pdu_reference         | count     | Reference ID Used to Link Requests to Responses           |\n| function_code         | string    | Parameter Function Code (in hex)                          |\n| function_name         | string    | Parameter Function Name                                   |\n| subfunction_code      | string    | User-Data Subfunction Code (in hex)                       |\n| subfunction_name      | string    | User-Data Subfunction Name                                |\n| error_class           | string    | Error Class Name                                          |\n| error_code            | string    | Error Code within Error Class                             |\n\n### S7COMM Read-SZL Log (s7comm_read_szl.log)\n\n#### Overview\n\nThis log captures information for the common S7Comm Read-SZL function. This data is logged to **s7comm_read_szl.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                               |\n| --------------------- |-----------|-----------------------------------------------------------|\n| ts                    | time      | Timestamp                                                 |\n| uid                   | string    | Unique ID for this Connection                             |\n| id                    | conn_id   | Default Zeek Connection Info (IP addresses, ports)        |\n| pdu_reference         | count     | Reference ID Used to Link Requests to Responses           |\n| method                | string    | Request or Response                                       |\n| szl_id                | string    | SZL ID (in hex)                                           |\n| szl_id_name           | string    | Meaning of SZL ID                                         |\n| szl_index             | string    | SZL Index (in hex)                                        |\n| return_code           | string    | Return Code (in hex)                                      |\n| return_code_name      | string    | Meaning of Return Code                                    |\n\n### S7COMM Upload-Download Log (s7comm_upload_download.log)\n\n#### Overview\n\nThis log captures information for the S7Comm Upload and Download functions (see list below). This data is logged to **s7comm_upload_download.log**.:\n* Start Upload\n* Upload\n* End Upload\n* Request Download\n* Download Block\n* Download Ended\n\n#### Fields Captured\n\n| Field                  | Type      | Description                                              |\n| ---------------------- |-----------|----------------------------------------------------------|\n| ts                     | time      | Timestamp                                                |\n| uid                    | string    | Unique ID for this Connection                            |\n| id                     | conn_id   | Default Zeek Connection Info (IP addresses, ports)       |\n| rosctr                 | count     | Remote Operating Service Control                         |\n| pdu_reference          | count     | Reference ID Used to Link Requests to Responses          |\n| function_code          | count     | Parameter Function Code                                  |\n| function_status        | count     | Function Status                                          |\n| session_id             | count     | Session ID                                               |\n| blocklength            | count     | Length of Block to Upload/Download                       |\n| filename               | string    | Filename of Block to Upload/Download                     |\n| block_type             | string    | Block Type to Upload/Download                            |\n| block_number           | string    | Block Number to Upload/Download                          |\n| destination_filesystem | string    | Destination Filesystem of Upload/Download                |\n\n### S7COMM-PLUS Log (s7comm_plus.log)\n\n#### Overview\n\nThis log captures s7comm-plus header information for every s7comm-plus packet and logs it to **s7comm_plus.log**.\n\n#### Fields Captured\n\n| Field                 | Type      | Description                                               |\n| --------------------- |-----------|-----------------------------------------------------------|\n| ts                    | time      | Timestamp                                                 |\n| uid                   | string    | Unique ID for this Connection                             |\n| id                    | conn_id   | Default Zeek Connection Info (IP addresses, ports)        |\n| is_orig               | bool      | True if the packet is sent from the originator            |\n| version               | count     | S7comm-plus Version                                       |\n| opcode                | string    | Opcode Code (in hex)                                      |\n| opcode_name           | string    | Opcode Name                                               |\n| function_code         | string    | Opcode Function Code (in hex)                             |\n| function_name         | string    | Opcode Function Name                                      |\n\n## S7COMM File Extraction\n\nS7COMM contains two functions for sending and receiving files: Upload and Download-Block. This plugin will extract files sent via these two functions and pass the extracted files to Zeek's file analysis framework.\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/icsnpp-bsap)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### Other Software\nIdaho National Laboratory is a cutting edge research facility which is a constantly producing high quality research and software. Feel free to take a look at our other software and scientific offerings at:\n\n[Primary Technology Offerings Page](https://www.inl.gov/inl-initiatives/technology-deployment)\n\n[Supported Open Source Software](https://github.com/idaholab)\n\n[Raw Experiment Open Source Software](https://github.com/IdahoLabResearch)\n\n[Unsupported Open Source Software](https://github.com/IdahoLabCuttingBoard)\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC\n\nLicensed under the 3-Part BSD (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  https://opensource.org/licenses/BSD-3-Clause\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\nLicensing\n-----\nThis software is licensed under the terms you may find in the file named \"LICENSE\" in this directory."}