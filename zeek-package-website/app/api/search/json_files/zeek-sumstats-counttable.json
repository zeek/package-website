{"description": "Two-dimensional buckets for sumstats (count occurences per $str).", "tags": "sumstats, summary statistics", "version": "0.0.4", "depends": null, "test_cmd": "cd tests && btest -d", "build_cmd": null, "url": "https://github.com/0xxon/zeek-sumstats-counttable", "summary": null, "script_dir": null, "plugin_dir": null, "readme": "[counttable.zeek](https://raw.githubusercontent.com/0xxon/zeek-sumstats-counttable/master/counttable.zeek)\n--------------------------------\n\nThis script provives the COUNTTABLE type for the Bro summary statistics\nframework.  This type works similar to SUM, but bins values for each $str\nprovided in the observation. (SUM itself does not accept a string).\n\nThis makes it possible to count the aggregate sum for a small number of keys\nper host like, for example, all TLS ciphers that were seen in use for hosts\nin the local subnet.\n\nThis structure should not be used with a high number of different $str values,\nespecially in cluster setups. If used like this it can cause excessive resource\nuse.\n\nExample\n-------\n\nThe following example counts the number of times each HTTP status code was\nencountered, counted by server address.\n\n```zeek\n@load packages/zeek-sumstats-counttable\n\nevent zeek_init()\n\t{\n\tlocal r1 = SumStats::Reducer($stream=\"status.code\", $apply=set(SumStats::COUNTTABLE));\n\tSumStats::create([$name=\"http-status-codes\",\n\t\t$epoch=1hr, $reducers=set(r1),\n\t\t$epoch_result(ts: time, key: SumStats::Key, result: SumStats::Result) =\n\t\t{\n\t\t\tlocal r = result[\"status.code\"];\n\t\t\t# abort if we have no results\n\t\t\tif ( ! r?$counttable )\n\t\t\t\treturn;\n\n\t\t\tlocal counttable = r$counttable;\n\t\t\tprint fmt(\"Host: %s\", key$host);\n\t\t\tfor ( i in counttable )\n\t\t\t\tprint fmt(\"status code: %s, count: %d\", i, counttable[i]);\n\t\t}]);\n\t}\n\nevent http_reply(c: connection, version: string, code: count, reason: string)\n\t{\n\tSumStats::observe(\"status.code\", [$host=c$id$resp_h], [$str=cat(code), $num=1]);\n\t}\n```\n\nThis will lead to output similar to:\n\n```\nHost: 8.12.217.126\nstatus code: 200, count: 16\nstatus code: 304, count: 6\nHost: 68.71.208.110\nstatus code: 200, count: 2\nHost: 68.71.209.235\nstatus code: 200, count: 18\nstatus code: 304, count: 3\n```\n"}