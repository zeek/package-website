{"description": "Add OUI lookup to Bro.", "tags": "oui, mac, dhcp", "version": "1.0.3", "depends": ["bro >=2.5.5"], "test_cmd": null, "build_cmd": null, "url": "https://github.com/hosom/bro-oui", "summary": null, "script_dir": "scripts", "plugin_dir": null, "readme": "# OUI\n\nThis module adds an OUI lookup to Bro IDS. Additionally, it comes with a script to maintain a Bro input file containing OUI data pulled from IEEE.\n\n## Performing an OUI Lookup\n\n```bro\n##! This script extends dhcp.log to include the manufacturer that a \n##! mac address is associated with as the client_vendor field.\nmodule OUI;\n\nexport {\n    ## DHCP::Info is owned by the DHCP module and is the record that\n    ## is logged when the DHCP module logs\n    redef record DHCP::Info += {\n        ## client_vendor is the manufacturer identified by the OUI\n        client_vendor:  string &log &optional;\n    };\n}\n\n# DHCP::aggregate_msgs is used to distribute data around clusters.\n# In this case, this event is used to extend the DHCP logs. \nevent DHCP::aggregate_msgs(ts: time, id: conn_id, uid: string, \n    is_orig: bool, msg: DHCP::Msg, options: DHCP::Options)\n    {\n    local vendor = lookup_oui(msg$chaddr);\n    DHCP::log_info$client_vendor = vendor;\n    }\n```\n\n## Updating the OUI Data File\n\nTo update the OUI data file, run the included `oui.py` script and specify the path of the existing `oui.dat` file.\n\n```\nusage: oui.py [-h] path\n\nDownload and parse a listing of Organizationally unique identifiers, then\nexport the listing as a Bro input file. This can then be used with the OUI\nmodule to allow for OUI lookups in Bro.\n\npositional arguments:\n  path        Where to place the exported input file.\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n## A Note on oui.dat\n\nLocal modifications to oui.dat will be overwritten by updates of this plugin. Additionally, by running `oui.py`, the entire oui.dat file will be overwritten. This file is not meant to contain local modifications."}