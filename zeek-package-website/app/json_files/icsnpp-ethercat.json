{"description": "Ethercat plugin for parsing and logging of the Ethercat protocol - CISA ICSNPP", "tags": "ecat, ECAT, ethercat, Ethercat, ics, ICS, CISA, INL, ICSNPP, icsnpp, zeek plugin, log writer, packet analyzer", "version": "main", "depends": null, "test_cmd": "cd tests && btest -c btest.cfg", "build_cmd": "./configure && make", "url": "https://github.com/cisagov/icsnpp-ethercat", "summary": null, "script_dir": "build/scripts/icsnpp/ethercat", "plugin_dir": null, "readme": "# ICSNPP-ETHERCAT\n\nIndustrial Control Systems Network Protocol Parsers (ICSNPP) - Ethercat.\n\n## Overview\n\nICSNPP-Ethercat is a Zeek plugin for parsing and logging fields within the Ethercat protocol.\n\nThis plugin was developed to be fully customizable, so if you would like to drill down into specific Ethercat packets and log certain variables, add the logging functionality to [scripts/icsnpp/ethercat/main.zeek](scripts/icsnpp/ethercat/main.zeek). The functions within [scripts/icsnpp/ethercat/main.zeek](scripts/icsnpp/ethercat/main.zeek) and [src/events.bif](src/events.bif) should prove to be a good guide on how to add new logging functionality.\n\nThis parser produces 8 log files. These log files are defined in [scripts/icsnpp/ethercat/main.zeek](scripts/icsnpp/ethercat/main.zeek).\n* ecat_registers.log\n* ecat_log_address.log\n* ecat_dev_info.log \n* ecat_aoe_info.log \n* ecat_coe_info.log \n* ecat_foe_info.log \n* ecat_soe_info.log \n* ecat_arp_info.log \n\nFor additional information on these log files, see the *Logging Capabilities* section below.\n\n## Installation\n\n### Installing Zeek\n\n### Package Manager\n\nThis script is available as a package for [Zeek Package Manger](https://docs.zeek.org/projects/package-manager/en/stable/index.html)\n\n```bash\nzkg refresh\nzkg install icsnpp-ethercat\n```\n\nIf this package is installed from ZKG it will be added to the available plugins. This can be tested by running `zeek -N`. If installed correctly you will see `ICSNPP::ETHERCAT`.\n\nIf you have ZKG configured to load packages (see @load packages in quickstart guide), this plugin and scripts will automatically be loaded and ready to go.\n[ZKG Quickstart Guide](https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html)\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add `icsnpp/ethercat` to your command to run this plugin's scripts on the packet capture:\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-ethercat.git\nzeek -Cr icsnpp-ethercat/tests/traces/ethercat_example.pcap icsnpp/ethercat\n```\n\n\n## Manual Install\nTo install this package manually, clone this repository and run the configure and make commands as shown below.\n\n```bash\ngit clone https://github.com/cisagov/icsnpp-ethercat.git\ncd icsnpp-ethercat/\n./configure\nmake\n```\nIf these commands succeed, you will end up with a newly created build directory which contains all the files needed to run/test this plugin. The easiest way to test the parser is to point the ZEEK_PLUGIN_PATH environment variable to this build directory.\n\n```bash\nexport ZEEK_PLUGIN_PATH=$PWD/build/\nzeek -N # Ensure everything compiled correctly and you are able to see ICSNPP::ETHERCAT\n```\nOnce you have tested the functionality locally and it appears to have compiled correctly, you can install it system-wide:\n\n```bash\nsudo make install\nunset ZEEK_PLUGIN_PATH\nzeek -N # Ensure everything installed correctly and you are able to see ICSNPP::ETHERCAT\n```\nTo run this plugin in a site deployment you will need to add the line @load icsnpp/ethercat to your site/local.zeek file in order to load this plugin's scripts.\n\nIf you are not using site/local.zeek or another site installation of Zeek and just want to run this package on a packet capture you can add icsnpp/ethercat to your command to run this plugin's scripts on the packet capture:\n\n```bash\nzeek -Cr icsnpp-ethercat/tests/traces/ethercat_example.pcap icsnpp/ethercat\n```\nIf you want to deploy this plugin on an already existing Zeek implementation and you don't want to build the plugin on the machine, you can extract the ICSNPP_ETHERCAT.tgz file to the directory of the established ZEEK_PLUGIN_PATH (default is ${ZEEK_INSTALLATION_DIR}/lib/zeek/plugins/).\n\n```bash\ntar xvzf build/ICSNPP_Ethercat.tgz -C $ZEEK_PLUGIN_PATH \n```\n## Logging Capabilities\n\n### ECAT Registers (ecat_registers.log)\n\n#### Overview\n\nThis log captures register memory address read and writes **ecat_registers.log**.\n\nThis log is also the catch all. Before it gets to this point it is sent through the more parsing routines to pull out any other information. ie. CoE, AoE, FoE, EoE, and SoE mailbox data. \n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| srcmac            | string    | Source Mac Address                                        |\n| dstmac            | string    | Destination Mac Address                                   |\n| Command           | string    | Ethercat Command                                          |\n| Slave_Addr        | string    | Ethercat Slave Address                                    |\n| Register_Type     | string    | Register Information                                      |\n| Register_Addr     | string    | Memory Address being accessed                             |\n| data              | string    | Data to be read or wrote to memory address                |\n\n\n### ECAT Address read write (ecat_log_address.log)\n\n#### Overview\n\nThis log captures Logical Read and writes to addresses and logs them to **ecat_log_address.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| srcmac            | string    | Source Mac Address                                        |\n| dstmac            | string    | Destination Mac Address                                   |\n| Log_Addr          | string    | Address data is being accessed from                       |\n| Length            | count     | Length of data                                            |\n| Command           | string    | Ethercat Command                                          |\n| data              | string    | Data read or write                                        |\n\n### ECAT Device Info (ecat_dev_info.log)\n\n#### Overview\n\nThis log captures ECAT Device info and logs it to **ecat_dev_info.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| slave_id          | string    | Ethercat Slave Address                                    |\n| revision          | string    | Revision of EtherCAT controller \t\t\t\t\t        |\n| dev_type          | string    | Type of EtherCAT controller                               |\n| build             | string    | Build version                                             |\n| fmmucnt           | string    | Fieldbus Memory Management Unit supported channel count   |\n| smcount           | string    | Sync Manager count                                        |\n| ports             | string    | Port Descriptor                                           |\n| dpram             | string    | Ram size                                                  |\n| features          | string    | Features supported                                        |\n\n### ECAT AoE Info (ecat_aoe_info.log)\n\n#### Overview\n\nThis log captures AoE (ADS over Ethercat, Automation Device Specification) information \nand logs it to **ecat_aoe_info.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| targetid          | string    | Target Network ID                                         |\n| targetport        | string    | Target Port                                               |\n| senderid          | string    | Sender Network ID                                         |\n| senderport        | string    | Sender Port                                               |\n| cmd               | string    | Command                                                   |\n| stateflags        | string    | State Flags                                               |\n| data              | string    | Command Data                                              |\n\n### ECAT CoE Info (ecat_coe_info.log)\n\n#### Overview\n\nThis log captures CoE (CAN over Ethercat) and logs it to **ecat_coe_info.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| number            | string    | Message number                                            |\n| Type              | string    | Message Type                                              |\n| req_resp          | string    | Request or Response type                                  |\n| index             | string    | Index                                                     |\n| subindex          | string    | Sub Index                                                 |\n| dataoffset        | string    | Data Offset                                               |\n\n### ECAT FoE Info (ecat_foe_info.log)\n\n#### Overview\n\nThis log captures FoE (File Over Ethercat) information and logs it to **ecat_foe_info.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| opCode            | string    | Operation Code                                            |\n| reserved          | string    | Reserved                                                  |\n| packet_num        | string    | Packet number                                             |\n| error_code        | string    | Error Code                                                |\n| filename          | string    | Filename                                                  |\n| data              | string    | Transferred Data                                          |\n\n### ECAT SoE Info (ecat_soe_info.log)\n\n#### Overview\n\nThis log captures SoE (Servo over Ethercat) and logs it to **ecat_soe_info.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| opCode            | string    | Command sent for controller                               |\n| incomplete        | string    | Function check to determine if it has been processed      |\n| error             | string    | Error message                                             |\n| drive_num         | string    | Drive number for command                                  |\n| element_flags     | string    | Element Flags                                             |\n| index             | string    | Message Index                                             |\n\n### ECAT ARP Info (ecat_arp_info.log)\n\n#### Overview\n\nThis log captures ARP info that is passed through EoE (Ethernet over Ethercat)\nand logs it to **ecat_arp_info.log**.\n\n#### Fields Captured\n\n| Field             | Type      | Description                                               |\n| ----------------- |-----------|-----------------------------------------------------------| \n| ts                | time      | Timestamp                                                 |\n| arp_type          | string    | Arp command                                               |\n| mac_src           | string    | Source Mac address                                        |\n| mac_dst           | string    | Destination Mac address                                   |\n| SPA               | addr      | Sender protocol address                                   |\n| SHA               | string    | Sender hardware address                                   |\n| TPA               | addr      | Target protocol address                                   |\n| THA               | string    | Target hardware address                                   |\n\n## ICSNPP Packages\n\nAll ICSNPP Packages:\n* [ICSNPP](https://github.com/cisagov/icsnpp)\n\nFull ICS Protocol Parsers:\n* [BACnet](https://github.com/cisagov/icsnpp-bacnet)\n    * Full Zeek protocol parser for BACnet (Building Control and Automation)\n* [BSAP](https://github.com/cisagov/icsnpp-bsap)\n    * Full Zeek protocol parser for BSAP (Bristol Standard Asynchronous Protocol) over IP\n    * Full Zeek protocol parser for BSAP Serial comm converted using serial tap device\n* [Ethercat](https://github.com/cisagov/icsnpp-ethercat)\n    * Full Zeek protocol parser for Ethercat\n* [Ethernet/IP and CIP](https://github.com/cisagov/icsnpp-enip)\n    * Full Zeek protocol parser for Ethernet/IP and CIP\n* [Genisys](https://github.com/cisagov/icsnpp-genisys)\n    * Full Zeek protocol parser for Genisys\n* [OPCUA-Binary](https://github.com/cisagov/icsnpp-opcua-binary)\n    * Full Zeek protocol parser for OPC UA (OPC Unified Architecture) - Binary\n* [S7Comm](https://github.com/cisagov/icsnpp-s7comm)\n    * Full Zeek protocol parser for S7comm, S7comm-plus, and COTP\n* [Synchrophasor](https://github.com/cisagov/icsnpp-synchrophasor)\n    * Full Zeek protocol parser for Synchrophasor Data Transfer for Power Systems (C37.118)\n\nUpdates to Zeek ICS Protocol Parsers:\n* [DNP3](https://github.com/cisagov/icsnpp-dnp3)\n    * DNP3 Zeek script extending logging capabilities of Zeek's default DNP3 protocol parser\n* [Modbus](https://github.com/cisagov/icsnpp-modbus)\n    * Modbus Zeek script extending logging capabilities of Zeek's default Modbus protocol parser\n\n### Other Software\nIdaho National Laboratory is a cutting edge research facility which is a constantly producing high quality research and software. Feel free to take a look at our other software and scientific offerings at:\n\n[Primary Technology Offerings Page](https://www.inl.gov/inl-initiatives/technology-deployment)\n\n[Supported Open Source Software](https://github.com/idaholab)\n\n[Raw Experiment Open Source Software](https://github.com/IdahoLabResearch)\n\n[Unsupported Open Source Software](https://github.com/IdahoLabCuttingBoard)\n\n### License\n\nCopyright 2023 Battelle Energy Alliance, LLC\n\nLicensed under the 3-Part BSD (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  https://opensource.org/licenses/BSD-3-Clause\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\nLicensing\n-----\nThis software is licensed under the terms you may find in the file named \"LICENSE\" in this directory.\n"}